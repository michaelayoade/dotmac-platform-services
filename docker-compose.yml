version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: dotmac-postgres
    environment:
      POSTGRES_DB: dotmac
      POSTGRES_USER: dotmac_user
      POSTGRES_PASSWORD: change-me-in-production
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dotmac_user -d dotmac"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache & Sessions
  redis:
    image: redis:7-alpine
    container_name: dotmac-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # OpenBao (Vault alternative)
  openbao:
    image: quay.io/openbao/openbao:latest
    container_name: dotmac-openbao
    cap_add:
      - IPC_LOCK
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: dev-token-12345
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
    ports:
      - "8200:8200"
    volumes:
      - openbao_data:/vault/data
    command: server -dev
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8200/v1/sys/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Celery Worker (optional)
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: dotmac-celery-worker
    command: celery -A dotmac.platform.tasks worker --loglevel=info
    environment:
      CELERY__BROKER_URL: redis://redis:6379/0
      CELERY__RESULT_BACKEND: redis://redis:6379/1
      DATABASE__HOST: postgres
      REDIS__HOST: redis
    depends_on:
      - redis
      - postgres
    profiles:
      - celery

  # Celery Beat Scheduler (optional)
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: dotmac-celery-beat
    command: celery -A dotmac.platform.tasks beat --loglevel=info
    environment:
      CELERY__BROKER_URL: redis://redis:6379/0
      CELERY__RESULT_BACKEND: redis://redis:6379/1
      DATABASE__HOST: postgres
      REDIS__HOST: redis
    depends_on:
      - redis
      - postgres
    profiles:
      - celery

  # Flower - Celery monitoring (optional)
  flower:
    image: mher/flower:latest
    container_name: dotmac-flower
    command: celery flower --broker=redis://redis:6379/0
    environment:
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/1
    ports:
      - "5555:5555"
    depends_on:
      - redis
    profiles:
      - celery

  # Jaeger - Distributed tracing (optional)
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: dotmac-jaeger
    environment:
      COLLECTOR_OTLP_ENABLED: "true"
    ports:
      - "6831:6831/udp"  # Compact thrift protocol
      - "6832:6832/udp"  # Binary thrift protocol
      - "5778:5778"      # Config HTTP
      - "16686:16686"    # Jaeger UI
      - "4317:4317"      # OTLP gRPC
      - "4318:4318"      # OTLP HTTP
      - "14268:14268"    # Jaeger collector HTTP
      - "14250:14250"    # Jaeger collector gRPC
      - "9411:9411"      # Zipkin
    profiles:
      - observability

  # MinIO - S3-compatible storage (optional)
  minio:
    image: minio/minio:latest
    container_name: dotmac-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    profiles:
      - storage

volumes:
  postgres_data:
  redis_data:
  openbao_data:
  minio_data:

networks:
  default:
    name: dotmac-network