openapi: 3.0.3
info:
  title: DotMac Platform Services API
  description: Unified platform services for authentication, secrets management, and observability
  version: 1.0.0
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8000
    description: Production server

security:
  - BearerAuth: []
  - ApiKeyAuth: []

paths:
  /health:
    get:
      summary: Health check endpoint
      operationId: getHealth
      tags:
        - System
      security: []
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '503':
          description: Service is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

  /auth/token:
    post:
      summary: Generate JWT access token
      operationId: createToken
      tags:
        - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRequest'
      responses:
        '200':
          description: Token created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /auth/token/refresh:
    post:
      summary: Refresh access token
      operationId: refreshToken
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/token/verify:
    post:
      summary: Verify JWT token
      operationId: verifyToken
      tags:
        - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyTokenRequest'
      responses:
        '200':
          description: Token is valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenClaims'
        '401':
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/sessions:
    get:
      summary: List user sessions
      operationId: listSessions
      tags:
        - Sessions
      parameters:
        - name: user_id
          in: query
          schema:
            type: string
        - name: active_only
          in: query
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: Sessions retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionListResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    post:
      summary: Create new session
      operationId: createSession
      tags:
        - Sessions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSessionRequest'
      responses:
        '201':
          description: Session created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          $ref: '#/components/responses/ValidationError'

  /auth/sessions/{session_id}:
    get:
      summary: Get session details
      operationId: getSession
      tags:
        - Sessions
      parameters:
        - name: session_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Session details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'

    delete:
      summary: Terminate session
      operationId: deleteSession
      tags:
        - Sessions
      parameters:
        - name: session_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Session terminated successfully
        '404':
          $ref: '#/components/responses/NotFoundError'

  /auth/api-keys:
    get:
      summary: List API keys
      operationId: listApiKeys
      tags:
        - API Keys
      parameters:
        - name: active_only
          in: query
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: API keys retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeyListResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    post:
      summary: Create API key
      operationId: createApiKey
      tags:
        - API Keys
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApiKeyRequest'
      responses:
        '201':
          description: API key created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeyResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          $ref: '#/components/responses/ValidationError'

  /auth/api-keys/{key_id}:
    delete:
      summary: Revoke API key
      operationId: revokeApiKey
      tags:
        - API Keys
      parameters:
        - name: key_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: API key revoked successfully
        '404':
          $ref: '#/components/responses/NotFoundError'

  /secrets/{path}:
    get:
      summary: Retrieve secret
      operationId: getSecret
      tags:
        - Secrets
      parameters:
        - name: path
          in: path
          required: true
          schema:
            type: string
          description: Secret path
        - name: version
          in: query
          schema:
            type: integer
          description: Secret version (for versioned backends)
      responses:
        '200':
          description: Secret retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

    put:
      summary: Store secret
      operationId: putSecret
      tags:
        - Secrets
      parameters:
        - name: path
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecretData'
      responses:
        '200':
          description: Secret stored successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretMetadata'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '422':
          $ref: '#/components/responses/ValidationError'

    delete:
      summary: Delete secret
      operationId: deleteSecret
      tags:
        - Secrets
      parameters:
        - name: path
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Secret deleted successfully
        '404':
          $ref: '#/components/responses/NotFoundError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key

  schemas:
    HealthResponse:
      type: object
      required:
        - status
        - timestamp
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        timestamp:
          type: string
          format: date-time
        checks:
          type: object
          properties:
            database:
              $ref: '#/components/schemas/HealthCheck'
            cache:
              $ref: '#/components/schemas/HealthCheck'
            secrets:
              $ref: '#/components/schemas/HealthCheck'
        version:
          type: string

    HealthCheck:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum: [healthy, unhealthy]
        response_time:
          type: number
          format: float
        error:
          type: string

    TokenRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          minLength: 1
        password:
          type: string
          minLength: 1
        tenant_id:
          type: string
        scopes:
          type: array
          items:
            type: string

    TokenResponse:
      type: object
      required:
        - access_token
        - token_type
        - expires_in
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
        token_type:
          type: string
          default: Bearer
        expires_in:
          type: integer
          description: Token expiry in seconds

    RefreshTokenRequest:
      type: object
      required:
        - refresh_token
      properties:
        refresh_token:
          type: string

    VerifyTokenRequest:
      type: object
      required:
        - token
      properties:
        token:
          type: string

    TokenClaims:
      type: object
      required:
        - sub
        - iat
        - exp
      properties:
        sub:
          type: string
          description: Subject (user ID)
        iat:
          type: integer
          description: Issued at timestamp
        exp:
          type: integer
          description: Expiry timestamp
        tenant_id:
          type: string
        scopes:
          type: array
          items:
            type: string
        jti:
          type: string
          description: JWT ID

    CreateSessionRequest:
      type: object
      required:
        - user_id
      properties:
        user_id:
          type: string
        tenant_id:
          type: string
        metadata:
          type: object
          additionalProperties: true

    SessionResponse:
      type: object
      required:
        - session_id
        - user_id
        - created_at
        - expires_at
        - status
      properties:
        session_id:
          type: string
        user_id:
          type: string
        tenant_id:
          type: string
        created_at:
          type: string
          format: date-time
        last_accessed:
          type: string
          format: date-time
        expires_at:
          type: string
          format: date-time
        status:
          type: string
          enum: [active, expired, revoked]
        metadata:
          type: object

    SessionListResponse:
      type: object
      required:
        - sessions
        - total
      properties:
        sessions:
          type: array
          items:
            $ref: '#/components/schemas/SessionResponse'
        total:
          type: integer

    CreateApiKeyRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        scopes:
          type: array
          items:
            type: string
        expires_at:
          type: string
          format: date-time

    ApiKeyResponse:
      type: object
      required:
        - key_id
        - api_key
        - name
        - created_at
      properties:
        key_id:
          type: string
        api_key:
          type: string
          description: The actual API key (only shown on creation)
        name:
          type: string
        scopes:
          type: array
          items:
            type: string
        created_at:
          type: string
          format: date-time
        expires_at:
          type: string
          format: date-time

    ApiKeyListResponse:
      type: object
      required:
        - api_keys
        - total
      properties:
        api_keys:
          type: array
          items:
            type: object
            properties:
              key_id:
                type: string
              name:
                type: string
              created_at:
                type: string
                format: date-time
              last_used:
                type: string
                format: date-time
              expires_at:
                type: string
                format: date-time
        total:
          type: integer

    SecretData:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          additionalProperties: true
        metadata:
          type: object
          additionalProperties: true

    SecretResponse:
      type: object
      required:
        - data
        - metadata
      properties:
        data:
          type: object
          additionalProperties: true
        metadata:
          type: object
          properties:
            created_at:
              type: string
              format: date-time
            updated_at:
              type: string
              format: date-time
            version:
              type: integer
            created_by:
              type: string

    SecretMetadata:
      type: object
      required:
        - path
        - created_at
      properties:
        path:
          type: string
        created_at:
          type: string
          format: date-time
        version:
          type: integer

    ErrorResponse:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
        message:
          type: string
        details:
          type: object

    ValidationError:
      type: object
      required:
        - detail
      properties:
        detail:
          type: array
          items:
            type: object
            properties:
              loc:
                type: array
                items:
                  type: string
              msg:
                type: string
              type:
                type: string

  responses:
    UnauthorizedError:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    ForbiddenError:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'

tags:
  - name: System
    description: System health and status endpoints
  - name: Authentication
    description: JWT token management
  - name: Sessions
    description: User session management
  - name: API Keys
    description: API key management
  - name: Secrets
    description: Secrets management