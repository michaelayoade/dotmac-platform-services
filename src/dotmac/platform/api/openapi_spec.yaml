openapi: 3.0.3
info:
  title: DotMac Platform Services API
  version: 1.0.0
  description: >-
    Canonical OpenAPI contract used by integration tests to validate core authentication
    and platform service endpoints.
servers:
  - url: https://api.dotmac.local
    description: Local testing server
paths:
  /auth/token:
    post:
      summary: Issue access and refresh tokens
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRequest'
      responses:
        '200':
          description: Token pair issued successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          description: Invalid credentials supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/token/verify:
    post:
      summary: Verify access token validity
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyTokenRequest'
      responses:
        '200':
          description: Token claims
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenClaims'
        '401':
          description: Token is invalid or expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/sessions:
    post:
      summary: Create a new session
      tags: [Sessions]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSessionRequest'
      responses:
        '201':
          description: Session created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionResponse'
        '400':
          description: Invalid payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      summary: List active sessions
      tags: [Sessions]
      parameters:
        - in: query
          name: user_id
          required: false
          schema:
            type: string
          description: Filter sessions by user identifier
        - in: query
          name: active_only
          required: false
          schema:
            type: boolean
            default: true
          description: If true only active sessions are returned
      responses:
        '200':
          description: Collection of sessions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionListResponse'
  /auth/sessions/{session_id}:
    get:
      summary: Fetch a session by identifier
      tags: [Sessions]
      parameters:
        - $ref: '#/components/parameters/SessionIdParam'
      responses:
        '200':
          description: Session details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionResponse'
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Revoke a session
      tags: [Sessions]
      parameters:
        - $ref: '#/components/parameters/SessionIdParam'
      responses:
        '204':
          description: Session revoked successfully
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/api-keys:
    post:
      summary: Create an API key
      tags: [API Keys]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApiKeyRequest'
      responses:
        '201':
          description: API key created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeyResponse'
    get:
      summary: List API keys
      tags: [API Keys]
      parameters:
        - in: query
          name: active_only
          required: false
          schema:
            type: boolean
            default: true
          description: Filter to include only active keys
      responses:
        '200':
          description: API key summaries
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeyListResponse'
  /auth/api-keys/{key_id}:
    delete:
      summary: Revoke an API key
      tags: [API Keys]
      parameters:
        - $ref: '#/components/parameters/ApiKeyIdParam'
      responses:
        '204':
          description: API key revoked
        '404':
          description: API key not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /health:
    get:
      summary: Platform health check
      tags: [Health]
      responses:
        '200':
          description: Health information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
components:
  parameters:
    SessionIdParam:
      name: session_id
      in: path
      required: true
      schema:
        type: string
      description: Unique session identifier
    ApiKeyIdParam:
      name: key_id
      in: path
      required: true
      schema:
        type: string
      description: Unique API key identifier
  schemas:
    TokenRequest:
      type: object
      required: [username, password]
      properties:
        username:
          type: string
          description: Username or email
        password:
          type: string
          format: password
        tenant_id:
          type: string
          nullable: true
        scopes:
          type: array
          items:
            type: string
          default: []
    VerifyTokenRequest:
      type: object
      required: [token]
      properties:
        token:
          type: string
          description: Access token to verify
    TokenResponse:
      type: object
      required: [access_token, token_type, expires_in]
      properties:
        access_token:
          type: string
          minLength: 16
        refresh_token:
          type: string
          nullable: true
        token_type:
          type: string
          enum: [Bearer]
        expires_in:
          type: integer
          format: int32
          minimum: 0
    TokenClaims:
      type: object
      required: [sub, type, iss, aud]
      properties:
        sub:
          type: string
          description: Subject identifier
        type:
          type: string
          enum: [access, refresh]
        iss:
          type: string
          description: Token issuer
        aud:
          type: string
          description: Token audience
        scope:
          type: string
          description: Space delimited scopes
        scopes:
          type: array
          items:
            type: string
        tenant_id:
          type: string
          nullable: true
        exp:
          type: integer
          format: int64
        iat:
          type: integer
          format: int64
        jti:
          type: string
    ErrorResponse:
      type: object
      properties:
        detail:
          type: string
        error:
          type: string
        code:
          type: string
    CreateSessionRequest:
      type: object
      required: [user_id]
      properties:
        user_id:
          type: string
        tenant_id:
          type: string
          nullable: true
        metadata:
          type: object
          additionalProperties: {}
    SessionResponse:
      type: object
      required: [session_id, user_id, tenant_id, created_at, expires_at, status, metadata]
      properties:
        session_id:
          type: string
        user_id:
          type: string
        tenant_id:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
        last_accessed:
          type: string
          format: date-time
          nullable: true
        expires_at:
          type: string
          format: date-time
        status:
          type: string
          enum: [active, expired, revoked]
        metadata:
          type: object
          additionalProperties: {}
    SessionListResponse:
      type: object
      required: [sessions, total]
      properties:
        sessions:
          type: array
          items:
            $ref: '#/components/schemas/SessionResponse'
        total:
          type: integer
          format: int32
    HealthResponse:
      type: object
      required: [status, timestamp]
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        timestamp:
          type: string
          format: date-time
        checks:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/HealthComponentStatus'
        version:
          type: string
    HealthComponentStatus:
      type: object
      required: [status]
      properties:
        status:
          type: string
          enum: [healthy, unhealthy]
        response_time:
          type: number
          format: float
    CreateApiKeyRequest:
      type: object
      required: [name]
      properties:
        name:
          type: string
        scopes:
          type: array
          items:
            type: string
          default: []
        expires_at:
          type: string
          format: date-time
          nullable: true
    ApiKeyResponse:
      type: object
      required: [key_id, api_key, name, scopes, created_at]
      properties:
        key_id:
          type: string
        api_key:
          type: string
        name:
          type: string
        scopes:
          type: array
          items:
            type: string
        created_at:
          type: string
          format: date-time
        expires_at:
          type: string
          format: date-time
          nullable: true
    ApiKeySummary:
      type: object
      required: [key_id, name, created_at]
      properties:
        key_id:
          type: string
        name:
          type: string
        created_at:
          type: string
          format: date-time
        expires_at:
          type: string
          format: date-time
          nullable: true
    ApiKeyListResponse:
      type: object
      required: [api_keys, total]
      properties:
        api_keys:
          type: array
          items:
            $ref: '#/components/schemas/ApiKeySummary'
        total:
          type: integer
          format: int32
