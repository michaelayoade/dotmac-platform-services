version: '3.8'

# Blue-Green Deployment Configuration
# This extends the production configuration with blue-green capabilities

services:
  # BLUE Environment (Current Production)
  app-blue:
    extends:
      file: docker-compose.production.yml
      service: app
    container_name: dotmac-app-blue
    environment:
      DEPLOYMENT_COLOR: blue
      SERVICE_VERSION: ${BLUE_VERSION:-latest}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.app-blue.rule=Host(`api.yourdomain.com`) && Headers(`X-Deployment-Preference`, `blue`)"
      - "traefik.http.services.app-blue.loadbalancer.server.port=8000"
      - "deployment.color=blue"
      - "deployment.version=${BLUE_VERSION:-latest}"
    networks:
      - blue-network
      - shared-network

  frontend-blue:
    extends:
      file: docker-compose.production.yml
      service: frontend
    container_name: dotmac-frontend-blue
    environment:
      DEPLOYMENT_COLOR: blue
      NEXT_PUBLIC_API_BASE_URL: http://app-blue:8000
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend-blue.rule=Host(`app.yourdomain.com`) && Headers(`X-Deployment-Preference`, `blue`)"
      - "traefik.http.services.frontend-blue.loadbalancer.server.port=3000"
      - "deployment.color=blue"
    networks:
      - blue-network
      - shared-network

  # GREEN Environment (New Deployment)
  app-green:
    extends:
      file: docker-compose.production.yml
      service: app
    container_name: dotmac-app-green
    environment:
      DEPLOYMENT_COLOR: green
      SERVICE_VERSION: ${GREEN_VERSION:-latest}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.app-green.rule=Host(`api.yourdomain.com`) && Headers(`X-Deployment-Preference`, `green`)"
      - "traefik.http.services.app-green.loadbalancer.server.port=8000"
      - "deployment.color=green"
      - "deployment.version=${GREEN_VERSION:-latest}"
    networks:
      - green-network
      - shared-network

  frontend-green:
    extends:
      file: docker-compose.production.yml
      service: frontend
    container_name: dotmac-frontend-green
    environment:
      DEPLOYMENT_COLOR: green
      NEXT_PUBLIC_API_BASE_URL: http://app-green:8000
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend-green.rule=Host(`app.yourdomain.com`) && Headers(`X-Deployment-Preference`, `green`)"
      - "traefik.http.services.frontend-green.loadbalancer.server.port=3000"
      - "deployment.color=green"
    networks:
      - green-network
      - shared-network

  # Traefik Load Balancer / Router
  traefik:
    image: traefik:v3.0
    container_name: dotmac-traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    command:
      # Enable Docker provider
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=shared-network"

      # Enable API and dashboard
      - "--api.dashboard=true"
      - "--api.insecure=true"

      # Configure entrypoints
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"

      # SSL configuration
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=admin@yourdomain.com"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"

      # Enable metrics
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.addEntryPointsLabels=true"
      - "--metrics.prometheus.addrouterslabels=true"
      - "--metrics.prometheus.addServicesLabels=true"

      # Access logs
      - "--accesslog=true"
      - "--accesslog.filepath=/logs/access.log"

      # Enable ping endpoint for health checks
      - "--ping=true"
      - "--ping.entrypoint=web"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-certificates:/letsencrypt
      - traefik-logs:/logs
    networks:
      - shared-network
      - blue-network
      - green-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.yourdomain.com`)"
      - "traefik.http.routers.dashboard.service=api@internal"

  # Deployment Controller
  deployment-controller:
    image: alpine:latest
    container_name: dotmac-deployment-controller
    restart: unless-stopped
    volumes:
      - ./scripts/blue-green-controller.sh:/controller.sh:ro
      - /var/run/docker.sock:/var/run/docker.sock
    entrypoint: /bin/sh
    command: ["/controller.sh", "monitor"]
    environment:
      HEALTH_CHECK_INTERVAL: 30
      DEPLOYMENT_TIMEOUT: 300
    networks:
      - shared-network
    depends_on:
      - traefik

  # Shared services (used by both blue and green)
  postgres:
    extends:
      file: docker-compose.production.yml
      service: postgres
    networks:
      - shared-network

  redis:
    extends:
      file: docker-compose.production.yml
      service: redis
    networks:
      - shared-network

  openbao:
    extends:
      file: docker-compose.production.yml
      service: openbao
    networks:
      - shared-network

  minio:
    extends:
      file: docker-compose.production.yml
      service: minio
    networks:
      - shared-network

networks:
  blue-network:
    name: dotmac-blue
    driver: bridge

  green-network:
    name: dotmac-green
    driver: bridge

  shared-network:
    name: dotmac-shared
    driver: bridge

volumes:
  traefik-certificates:
  traefik-logs: