name: Deploy to Production

on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security and Quality Gates
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Build and Test
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: security-scan
    outputs:
      image-backend: ${{ steps.meta-backend.outputs.tags }}
      image-frontend: ${{ steps.meta-frontend.outputs.tags }}
      image-digest-backend: ${{ steps.build-backend.outputs.digest }}
      image-digest-frontend: ${{ steps.build-frontend.outputs.digest }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract backend metadata
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix=sha-

      - name: Extract frontend metadata
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix=sha-

      - name: Build and push backend
        id: build-backend
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.prod
          target: api
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Build and push frontend
        id: build-frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile.prod
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Run backend tests in container
        run: |
          docker run --rm \
            -e ENVIRONMENT=test \
            -e DATABASE_URL=sqlite:///tmp/test.db \
            ${{ steps.meta-backend.outputs.tags }} \
            sh -c "cd /app && python -m pytest tests/ --tb=short -x"

  # Staging Deployment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    concurrency:
      group: deploy-staging
      cancel-in-progress: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup SSH for deployment
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.STAGING_SSH_KEY }}

      - name: Deploy to staging server
        run: |
          cat > deploy_staging.sh << 'EOF'
          #!/bin/bash
          set -e

          # Server connection details
          SERVER="${{ secrets.STAGING_SERVER }}"
          USER="${{ secrets.STAGING_USER }}"
          DEPLOY_PATH="/opt/dotmac-platform"

          echo "üöÄ Deploying to staging server: $SERVER"

          # Create deployment script
          ssh -o StrictHostKeyChecking=no $USER@$SERVER "
            set -e

            # Navigate to deployment directory
            cd $DEPLOY_PATH

            # Pull latest changes
            git fetch origin
            git reset --hard origin/main

            # Update environment file
            cp .env.staging .env

            # Pull latest images
            docker-compose -f docker-compose.production.yml pull

            # Run database migrations
            docker-compose -f docker-compose.production.yml run --rm app migrate

            # Deploy with zero-downtime
            docker-compose -f docker-compose.production.yml up -d --remove-orphans

            # Health check
            echo '‚è≥ Waiting for services to be ready...'
            sleep 30

            # Check API health
            if curl -f http://localhost:8000/health; then
              echo '‚úÖ API is healthy'
            else
              echo '‚ùå API health check failed'
              exit 1
            fi

            # Check Frontend health
            if curl -f http://localhost:3000/api/health; then
              echo '‚úÖ Frontend is healthy'
            else
              echo '‚ùå Frontend health check failed'
              exit 1
            fi

            echo 'üéâ Staging deployment successful!'
          "
          EOF

          chmod +x deploy_staging.sh
          ./deploy_staging.sh

      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # Production Deployment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-test, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    concurrency:
      group: deploy-production
      cancel-in-progress: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup SSH for deployment
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}

      - name: Deploy to production server
        run: |
          cat > deploy_production.sh << 'EOF'
          #!/bin/bash
          set -e

          # Server connection details
          SERVER="${{ secrets.PRODUCTION_SERVER }}"
          USER="${{ secrets.PRODUCTION_USER }}"
          DEPLOY_PATH="/opt/dotmac-platform"

          echo "üöÄ Deploying to production server: $SERVER"

          # Create deployment script
          ssh -o StrictHostKeyChecking=no $USER@$SERVER "
            set -e

            # Navigate to deployment directory
            cd $DEPLOY_PATH

            # Create backup
            BACKUP_DIR=\"/opt/backups/dotmac-platform/\$(date +%Y%m%d_%H%M%S)\"
            mkdir -p \$BACKUP_DIR

            # Backup database
            docker-compose -f docker-compose.production.yml exec -T postgres \
              pg_dump -U dotmac_user dotmac_prod > \$BACKUP_DIR/database.sql

            # Backup uploaded files
            cp -r storage \$BACKUP_DIR/ || true

            echo \"‚úÖ Backup created at \$BACKUP_DIR\"

            # Pull latest changes
            git fetch origin
            git reset --hard origin/main

            # Update environment file
            cp .env.production .env

            # Pull latest images
            docker-compose -f docker-compose.production.yml pull

            # Run database migrations
            docker-compose -f docker-compose.production.yml run --rm app migrate

            # Deploy with rolling update
            docker-compose -f docker-compose.production.yml up -d --remove-orphans --no-deps app

            # Wait for new containers to be ready
            echo '‚è≥ Waiting for new containers to be ready...'
            sleep 60

            # Health check
            for i in {1..10}; do
              if curl -f http://localhost:8000/health; then
                echo \"‚úÖ API is healthy (attempt \$i)\"
                break
              else
                echo \"‚ö†Ô∏è  API not ready yet (attempt \$i), waiting...\"
                sleep 10
              fi
            done

            # Update frontend
            docker-compose -f docker-compose.production.yml up -d --no-deps frontend

            # Final health check
            sleep 30
            if curl -f http://localhost:8000/health && curl -f http://localhost:3000/api/health; then
              echo 'üéâ Production deployment successful!'
            else
              echo '‚ùå Health check failed, rolling back...'
              # Rollback logic here
              exit 1
            fi
          "
          EOF

          chmod +x deploy_production.sh
          ./deploy_production.sh

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## Changes in this Release

            - Backend Image: `${{ needs.build-and-test.outputs.image-backend }}`
            - Frontend Image: `${{ needs.build-and-test.outputs.image-frontend }}`
            - Backend Digest: `${{ needs.build-and-test.outputs.image-digest-backend }}`
            - Frontend Digest: `${{ needs.build-and-test.outputs.image-digest-frontend }}`

            ## Deployment

            ‚úÖ Deployed to production at $(date)
          draft: false
          prerelease: false

      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # Rollback capability
  rollback:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && contains(github.event.inputs.environment, 'rollback')
    environment: production

    steps:
      - name: Rollback production deployment
        run: |
          echo "üîÑ Rolling back production deployment..."
          # Implement rollback logic here
          # This could involve reverting to previous Docker images,
          # restoring database backups, etc.