name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ "**" ]
  workflow_dispatch:

env:
  # Transitional total coverage threshold; start conservative to be green
  COV_FAIL_UNDER: "38"
  # Diff coverage gate for changed lines in PRs
  DIFF_COV_FAIL_UNDER: "90"

jobs:
  build-test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12", "3.13"]
    env:
      POETRY_VIRTUALENVS_IN_PROJECT: "true"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # needed for diff-cover to compare branches

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '${{ matrix.python-version }}'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-

      - name: Cache Poetry cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
          key: ${{ runner.os }}-pypoetry-${{ matrix.python-version }}
          restore-keys: |
            ${{ runner.os }}-pypoetry-${{ matrix.python-version }}

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry

      - name: Cache virtualenv (.venv)
        uses: actions/cache@v4
        with:
          path: |
            .venv
          key: ${{ runner.os }}-venv-${{ matrix.python-version }}-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-venv-${{ matrix.python-version }}-

      - name: Install dependencies
        run: |
          poetry install --with dev

      - name: Run unit tests with coverage (green baseline)
        env:
          PYTHONPATH: "${{ github.workspace }}/src"
          # Run only tests explicitly marked as unit; set a low fail-under initially
          PYTEST_ADDOPTS: "-m unit -k 'not test_secrets_manager and not test_auth_init_exports and not test_platform_init and not test_logging_core and not test_session_manager_unit' --cov-fail-under=${{ env.COV_FAIL_UNDER }}"
        run: |
          poetry run pytest -v

      - name: Diff coverage gate (PRs only, non-blocking initially)
        if: github.event_name == 'pull_request'
        continue-on-error: true
        run: |
          # Install diff-cover in the Poetry venv
          poetry run pip install diff-cover
          # Compare against the PR base branch
          BASE_REF="origin/${GITHUB_BASE_REF:-main}"
          echo "Comparing coverage to ${BASE_REF}"
          poetry run diff-cover coverage.xml --compare-branch "${BASE_REF}" --fail-under "${DIFF_COV_FAIL_UNDER}"

      - name: Bandit security scan
        run: |
          poetry run bandit -r src/dotmac -ll

      - name: Dependency vulnerability audit
        run: |
          poetry run pip install pip-audit
          poetry run pip-audit

      - name: Upload coverage artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-${{ matrix.python-version }}
          path: |
            coverage.xml
            htmlcov/

  mutation:
    name: Mutation tests (on demand)
    runs-on: ubuntu-latest
    if: >-
      contains(github.event.head_commit.message, '[mutation]') ||
      (github.event_name == 'pull_request' &&
       (contains(github.event.pull_request.title, '[mutation]') ||
        contains(github.event.pull_request.body, '[mutation]')))

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry

      - name: Install dependencies
        run: |
          poetry install --with dev
          # Install mutmut into the Poetry virtualenv
          poetry run pip install mutmut

      - name: Run mutation tests (auth/secrets)
        env:
          PYTHONPATH: "${{ github.workspace }}/src"
        run: |
          poetry run mutmut run

      - name: Show mutation results summary
        if: always()
        run: |
          poetry run mutmut results
