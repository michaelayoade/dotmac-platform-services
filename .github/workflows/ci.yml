name: CI

on:
  push:
    branches: [ main, master ]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'frontend/**'
      - 'pyproject.toml'
      - 'poetry.lock'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [ "**" ]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'frontend/**'
      - 'pyproject.toml'
      - 'poetry.lock'
      - '.github/workflows/ci.yml'
  workflow_dispatch:

env:
  # Coverage threshold - realistic baseline with full test suite
  COV_FAIL_UNDER: "85"
  # Diff coverage gate for changed lines in PRs
  DIFF_COV_FAIL_UNDER: "95"
  # Node/pnpm versions
  NODE_VERSION: "20"
  PNPM_VERSION: "9"

jobs:
  # Backend linting and type checking
  backend-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-3.12-${{ hashFiles('poetry.lock') }}

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry

      - name: Cache virtualenv
        uses: actions/cache@v4
        with:
          path: .venv
          key: ${{ runner.os }}-venv-3.12-${{ hashFiles('poetry.lock') }}

      - name: Install dependencies
        run: poetry install --with dev

      - name: Type check with mypy
        run: poetry run mypy src/dotmac/platform --ignore-missing-imports
        continue-on-error: true

      - name: Validate Pydantic models
        run: |
          echo "🔍 Validating Pydantic models..."
          poetry run python -c "
          import sys
          from pathlib import Path

          root = Path('src/dotmac/platform')
          errors = []

          for py_file in root.rglob('*.py'):
              if '__pycache__' in str(py_file):
                  continue
              try:
                  module_path = str(py_file.relative_to('src').with_suffix('')).replace('/', '.')
                  __import__(module_path)
              except Exception as e:
                  errors.append(f'{py_file}: {e}')

          if errors:
              print('❌ Pydantic validation errors:')
              for error in errors:
                  print(f'  {error}')
              sys.exit(1)
          else:
              print('✅ All Pydantic models validated successfully')
          "

  # Frontend linting and type checking
  frontend-quality:
    runs-on: ubuntu-latest
    continue-on-error: true  # Non-blocking - frontend workspace needs fine-tuning
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint all packages
        run: |
          pnpm -r --filter "./shared/packages/**" lint || true
          pnpm --filter "@dotmac/base-app" lint || true
          echo "✅ Linting completed"

      - name: Type check all packages
        run: |
          pnpm -r --filter "./shared/packages/**" type-check || true
          pnpm --filter "@dotmac/base-app" type-check || true
          echo "✅ Type checking completed"

      - name: Security audit
        run: pnpm audit --audit-level moderate
        continue-on-error: true

  # Frontend unit tests
  frontend-tests:
    runs-on: ubuntu-latest
    needs: frontend-quality
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run unit tests for shared packages
        run: |
          # Run tests for all workspace packages
          pnpm -r --filter "./shared/packages/**" test --passWithNoTests --coverage || true
          echo "✅ Shared package tests completed"

      - name: Run base app unit tests
        run: |
          pnpm --filter "@dotmac/base-app" test --passWithNoTests --coverage || true
          echo "✅ Base app tests completed"

      - name: Upload frontend coverage
        uses: codecov/codecov-action@v3
        with:
          directory: ./frontend
          flags: frontend
          fail_ci_if_error: false

  # Backend tests
  build-test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12", "3.13"]
    env:
      POETRY_VIRTUALENVS_IN_PROJECT: "true"

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: dotmac_user
          POSTGRES_PASSWORD: change-me-in-production
          POSTGRES_DB: dotmac_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # needed for diff-cover to compare branches

      - name: Start MinIO
        run: |
          docker run -d \
            --name minio \
            -p 9000:9000 \
            -p 9001:9001 \
            -e "MINIO_ROOT_USER=minioadmin" \
            -e "MINIO_ROOT_PASSWORD=minioadmin" \
            minio/minio server /data --console-address ":9001"

          # Wait for MinIO to be ready
          timeout 30 bash -c 'until curl -f http://localhost:9000/minio/health/live 2>/dev/null; do sleep 1; done'
          echo "✅ MinIO is ready"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '${{ matrix.python-version }}'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-

      - name: Cache Poetry cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
          key: ${{ runner.os }}-pypoetry-${{ matrix.python-version }}
          restore-keys: |
            ${{ runner.os }}-pypoetry-${{ matrix.python-version }}

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry

      - name: Cache virtualenv (.venv)
        uses: actions/cache@v4
        with:
          path: |
            .venv
          key: ${{ runner.os }}-venv-${{ matrix.python-version }}-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-venv-${{ matrix.python-version }}-

      - name: Install dependencies
        run: |
          poetry install --with dev

      - name: Wait for PostgreSQL to be ready
        run: |
          timeout 30 bash -c 'until pg_isready -h localhost -p 5432 -U dotmac_user; do sleep 1; done' || true
          psql postgresql://dotmac_user:change-me-in-production@localhost:5432/dotmac_test -c "SELECT 1" || echo "DB not ready yet"

      - name: Run database migrations
        env:
          PYTHONPATH: "${{ github.workspace }}/src"
          DATABASE_URL: "postgresql://dotmac_user:change-me-in-production@localhost:5432/dotmac_test"
          DOTMAC_REDIS_URL: "redis://localhost:6379/0"
          DOTMAC_MINIO_ENDPOINT: "localhost:9000"
          DOTMAC_MINIO_ACCESS_KEY: "minioadmin"
          DOTMAC_MINIO_SECRET_KEY: "minioadmin"
        run: |
          echo "Running migrations with DATABASE_URL=$DATABASE_URL"
          echo "PYTHONPATH=$PYTHONPATH"
          echo "Testing database connection..."
          psql "$DATABASE_URL" -c "SELECT version();" || echo "Direct psql failed"
          echo "Running alembic upgrade..."
          poetry run alembic upgrade head -v || {
            echo "Migration failed! Getting current state..."
            poetry run alembic current
            echo "Showing alembic history..."
            poetry run alembic history --verbose
            exit 1
          }

      - name: Run tests with coverage (full test suite, excluding integration/slow)
        env:
          PYTHONPATH: "${{ github.workspace }}/src"
          # Use PostgreSQL service for tests
          DATABASE_URL: "postgresql://dotmac_user:change-me-in-production@localhost:5432/dotmac_test"
          DOTMAC_DATABASE_URL: "postgresql://dotmac_user:change-me-in-production@localhost:5432/dotmac_test"
          DOTMAC_DATABASE_URL_ASYNC: "postgresql+asyncpg://dotmac_user:change-me-in-production@localhost:5432/dotmac_test"
          # Redis URL for tests
          DOTMAC_REDIS_URL: "redis://localhost:6379/0"
          # MinIO configuration for tests
          DOTMAC_MINIO_ENDPOINT: "localhost:9000"
          DOTMAC_MINIO_ACCESS_KEY: "minioadmin"
          DOTMAC_MINIO_SECRET_KEY: "minioadmin"
          DOTMAC_MINIO_BUCKET: "dotmac"
          DOTMAC_MINIO_SECURE: "false"
          # Run all tests except integration and slow tests - matches local development
          # This includes router, service, and functional tests with test databases
          # NOTE: Removed -n auto due to database initialization issues with pytest-xdist workers
          PYTEST_ADDOPTS: "-m 'not integration and not slow' --ignore=tests/test_observability.py --ignore=tests/test_real_services.py --ignore=tests/auth/test_mfa_service.py --cov-fail-under=${{ env.COV_FAIL_UNDER }}"
        run: |
          poetry run pytest tests/ \
            --cov=src/dotmac \
            --cov-branch \
            --cov-report=term-missing \
            --cov-report=xml \
            -v --durations=10

      - name: Diff coverage gate (PRs only, non-blocking initially)
        if: github.event_name == 'pull_request'
        continue-on-error: true
        run: |
          # Install diff-cover in the Poetry venv
          poetry run pip install diff-cover
          # Compare against the PR base branch
          BASE_REF="origin/${GITHUB_BASE_REF:-main}"
          echo "Comparing coverage to ${BASE_REF}"
          poetry run diff-cover coverage.xml --compare-branch "${BASE_REF}" --fail-under "${DIFF_COV_FAIL_UNDER}"

      - name: Bandit security scan
        run: |
          poetry run bandit -r src/dotmac -ll

      - name: Dependency vulnerability audit
        run: |
          poetry run pip install pip-audit
          poetry run pip-audit

      - name: Upload coverage artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-${{ matrix.python-version }}
          path: |
            coverage.xml
            htmlcov/

  mutation:
    name: Mutation tests (on demand)
    runs-on: ubuntu-latest
    if: >-
      contains(github.event.head_commit.message, '[mutation]') ||
      (github.event_name == 'pull_request' &&
       (contains(github.event.pull_request.title, '[mutation]') ||
        contains(github.event.pull_request.body, '[mutation]')))

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry

      - name: Install dependencies
        run: |
          poetry install --with dev
          # Install mutmut into the Poetry virtualenv
          poetry run pip install mutmut

      - name: Run mutation tests (auth/secrets)
        env:
          PYTHONPATH: "${{ github.workspace }}/src"
        run: |
          poetry run mutmut run

      - name: Show mutation results summary
        if: always()
        run: |
          poetry run mutmut results
