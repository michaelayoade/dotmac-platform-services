name: Type Safety Validation

on:
  pull_request:
    paths:
      - 'src/dotmac/platform/**/*.py'
      - 'frontend/apps/base-app/**/*.ts'
      - 'frontend/apps/base-app/**/*.tsx'
      - 'frontend/shared/packages/**/*.ts'
      - 'frontend/shared/packages/**/*.tsx'
      - '.github/workflows/type-safety-validation.yml'
  push:
    branches:
      - main
      - develop
    paths:
      - 'src/dotmac/platform/**/*.py'
      - 'frontend/apps/base-app/**/*.ts'
      - 'frontend/apps/base-app/**/*.tsx'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  backend-types:
    name: Backend Type Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install dependencies
        run: poetry install --with dev

      - name: Run Pydantic validation checks
        run: |
          echo "🔍 Validating Pydantic models..."
          poetry run python -c "
          import sys
          from pathlib import Path

          # Import all modules to validate Pydantic models at import time
          root = Path('src/dotmac/platform')
          errors = []

          for py_file in root.rglob('*.py'):
              if '__pycache__' in str(py_file):
                  continue
              try:
                  module_path = str(py_file.relative_to('src').with_suffix('')).replace('/', '.')
                  __import__(module_path)
              except Exception as e:
                  errors.append(f'{py_file}: {e}')

          if errors:
              print('❌ Pydantic validation errors:')
              for error in errors:
                  print(f'  {error}')
              sys.exit(1)
          else:
              print('✅ All Pydantic models validated successfully')
          "

      - name: Type check with mypy
        run: |
          echo "🔍 Running mypy type checker..."
          poetry run mypy src/dotmac/platform --ignore-missing-imports || echo "⚠️ Mypy found issues (non-blocking)"

      - name: Start backend server
        run: |
          poetry run uvicorn src.dotmac.platform.main:app --host 0.0.0.0 --port 8000 &
          echo "⏳ Waiting for backend to start..."

          for i in {1..30}; do
            if curl -s http://localhost:8000/health > /dev/null; then
              echo "✅ Backend started successfully"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "❌ Backend failed to start"
              exit 1
            fi
            sleep 1
          done

      - name: Validate OpenAPI schema
        run: |
          echo "🔍 Validating OpenAPI schema..."

          # Download schema
          curl -f http://localhost:8000/openapi.json -o openapi-schema.json

          # Validate schema structure
          python -c "
          import json
          import sys

          with open('openapi-schema.json') as f:
              schema = json.load(f)

          # Check required fields
          required = ['openapi', 'info', 'paths', 'components']
          missing = [field for field in required if field not in schema]

          if missing:
              print(f'❌ Missing required fields: {missing}')
              sys.exit(1)

          # Check paths exist
          if not schema['paths']:
              print('❌ No API paths defined')
              sys.exit(1)

          # Check components/schemas exist
          if 'schemas' not in schema.get('components', {}):
              print('❌ No component schemas defined')
              sys.exit(1)

          print(f'✅ OpenAPI schema valid')
          print(f'   - {len(schema[\"paths\"])} endpoints')
          print(f'   - {len(schema[\"components\"][\"schemas\"])} schemas')
          "

      - name: Upload OpenAPI schema
        uses: actions/upload-artifact@v3
        with:
          name: openapi-schema
          path: openapi-schema.json
          retention-days: 7

  frontend-types:
    name: Frontend Type Validation
    runs-on: ubuntu-latest
    needs: backend-types
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: 'frontend/pnpm-lock.yaml'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        working-directory: frontend
        run: pnpm install --frozen-lockfile

      - name: Download OpenAPI schema
        uses: actions/download-artifact@v3
        with:
          name: openapi-schema
          path: frontend/apps/base-app

      - name: Generate TypeScript types from OpenAPI
        working-directory: frontend/apps/base-app
        run: |
          echo "🔨 Generating TypeScript types from OpenAPI schema..."

          # Create output directory
          mkdir -p lib/api/generated

          # Generate types
          npx openapi-typescript openapi-schema.json -o lib/api/generated/types.ts

          echo "✅ Types generated successfully"

      - name: TypeScript type check
        working-directory: frontend/apps/base-app
        run: |
          echo "🔍 Running TypeScript type checker..."
          pnpm run type-check

      - name: Validate API client usage
        working-directory: frontend/apps/base-app
        run: |
          echo "🔍 Validating API client usage patterns..."

          # Check for unsafe API calls (not using generated client)
          if grep -r "fetch('http://localhost:8000" app/ --include="*.ts" --include="*.tsx" 2>/dev/null; then
            echo "⚠️ Warning: Found hardcoded API calls. Consider using generated API client."
          fi

          # Check for axios usage without types
          if grep -r "axios\." app/ --include="*.ts" --include="*.tsx" 2>/dev/null | grep -v "// @ts-expect-error"; then
            echo "⚠️ Warning: Found axios usage. Consider using typed API client."
          fi

          echo "✅ API client validation complete"

      - name: Build frontend (validates all types)
        working-directory: frontend/apps/base-app
        run: pnpm run build

  type-safety-report:
    name: Generate Type Safety Report
    runs-on: ubuntu-latest
    needs: [backend-types, frontend-types]
    if: always() && github.event_name == 'pull_request'

    steps:
      - name: Download OpenAPI schema
        uses: actions/download-artifact@v3
        with:
          name: openapi-schema

      - name: Generate type safety report
        run: |
          cat > type-safety-report.md << 'EOF'
          ## 🔒 Type Safety Validation Report

          This PR has been validated for type safety between backend and frontend.

          ### ✅ Validations Passed

          - **Backend Pydantic Models**: All models validated successfully
          - **OpenAPI Schema**: Schema generated and validated
          - **TypeScript Generation**: Types generated from OpenAPI schema
          - **TypeScript Type Check**: No type errors in frontend code
          - **Frontend Build**: Build completed successfully with all types validated

          ### 📊 Schema Statistics

          EOF

          python3 << 'PYTHON'
          import json
          with open('openapi-schema.json') as f:
              schema = json.load(f)
          print(f"- **API Endpoints**: {len(schema['paths'])}")
          print(f"- **Data Models**: {len(schema['components']['schemas'])}")
          print(f"- **OpenAPI Version**: {schema['openapi']}")
          PYTHON

      - name: Comment PR with report
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('type-safety-report.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });
