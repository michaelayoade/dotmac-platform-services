"""
Comprehensive tests for PDF invoice generator using ReportLab.

Tests PDF generation, layout customization, locale formatting,
batch processing, and error handling.
"""

import pytest
import io
from datetime import datetime, timezone
from decimal import Decimal
from unittest.mock import MagicMock, patch, mock_open

from reportlab.lib.pagesizes import A4, LETTER
from reportlab.lib import colors

from dotmac.platform.billing.pdf_generator_reportlab import (
    ReportLabInvoiceGenerator,
    default_reportlab_generator,
    generate_invoice_pdf_reportlab,
    DEFAULT_PAGE_SIZE,
    DEFAULT_MARGINS,
)
from dotmac.platform.billing.money_models import MoneyInvoice, MoneyLineItem, Money


@pytest.fixture
def sample_invoice():
    """Create a sample invoice for testing."""
    line_items = [
        MoneyLineItem(
            description="Premium Subscription",
            quantity=1,
            unit_price=Money(amount="99.00", currency="USD"),
            tax_amount=Money(amount="9.90", currency="USD"),
            total_price=Money(amount="108.90", currency="USD"),
        ),
        MoneyLineItem(
            description="Additional User Licenses",
            quantity=5,
            unit_price=Money(amount="10.00", currency="USD"),
            tax_amount=Money(amount="5.00", currency="USD"),
            total_price=Money(amount="55.00", currency="USD"),
        ),
    ]

    invoice = MoneyInvoice(
        invoice_number="INV-2025-001",
        customer_id="cust-123",
        billing_email="customer@example.com",
        currency="USD",
        status="paid",
        payment_status="paid",
        issue_date=datetime.now(timezone.utc),
        due_date=datetime.now(timezone.utc),
        line_items=line_items,
        subtotal=Money(amount="149.00", currency="USD"),
        tax_amount=Money(amount="14.90", currency="USD"),
        total_amount=Money(amount="163.90", currency="USD"),
        net_amount_due=Money(amount="163.90", currency="USD"),
        notes="Thank you for your business!",
    )

    return invoice


@pytest.fixture
def company_info():
    """Create sample company information."""
    return {
        "name": "Test Company Inc.",
        "address": {
            "street": "123 Business St",
            "city": "San Francisco",
            "state": "CA",
            "postal_code": "94105",
            "country": "USA",
        },
        "email": "billing@testcompany.com",
        "phone": "+1 (555) 123-4567",
        "website": "www.testcompany.com",
        "tax_id": "12-3456789",
    }


@pytest.fixture
def customer_info():
    """Create sample customer information."""
    return {
        "name": "John Doe",
        "company": "Acme Corp",
    }


class TestGeneratorInitialization:
    """Test generator initialization and configuration."""

    def test_default_initialization(self):
        """Test generator with default settings."""
        generator = ReportLabInvoiceGenerator()

        assert generator.page_size == DEFAULT_PAGE_SIZE
        assert generator.margins == DEFAULT_MARGINS
        assert generator.logo_path is None

    def test_custom_page_size(self):
        """Test generator with custom page size."""
        generator = ReportLabInvoiceGenerator(page_size=LETTER)

        assert generator.page_size == LETTER

    def test_custom_margins(self):
        """Test generator with custom margins."""
        custom_margins = (15, 15, 15, 15)
        generator = ReportLabInvoiceGenerator(margins=custom_margins)

        assert generator.margins == custom_margins

    def test_with_logo_path(self):
        """Test generator with logo path."""
        logo_path = "/path/to/logo.png"
        generator = ReportLabInvoiceGenerator(logo_path=logo_path)

        assert generator.logo_path == logo_path

    def test_styles_creation(self):
        """Test that custom styles are created."""
        generator = ReportLabInvoiceGenerator()

        assert "CompanyName" in generator.styles
        assert "InvoiceTitle" in generator.styles
        assert "SectionTitle" in generator.styles
        assert "Normal" in generator.styles
        assert "BoldText" in generator.styles


class TestPDFGeneration:
    """Test PDF generation functionality."""

    def test_generate_basic_invoice(self, sample_invoice, company_info, customer_info):
        """Test generating a basic invoice PDF."""
        generator = ReportLabInvoiceGenerator()

        pdf_bytes = generator.generate_invoice_pdf(
            invoice=sample_invoice,
            company_info=company_info,
            customer_info=customer_info,
        )

        assert isinstance(pdf_bytes, bytes)
        assert len(pdf_bytes) > 0
        assert pdf_bytes.startswith(b"%PDF")  # PDF file signature

    def test_generate_without_company_info(self, sample_invoice):
        """Test generating invoice without company info."""
        generator = ReportLabInvoiceGenerator()

        pdf_bytes = generator.generate_invoice_pdf(invoice=sample_invoice)

        assert isinstance(pdf_bytes, bytes)
        assert len(pdf_bytes) > 0

    def test_generate_without_customer_info(self, sample_invoice, company_info):
        """Test generating invoice without customer info."""
        generator = ReportLabInvoiceGenerator()

        pdf_bytes = generator.generate_invoice_pdf(
            invoice=sample_invoice,
            company_info=company_info,
        )

        assert isinstance(pdf_bytes, bytes)
        assert len(pdf_bytes) > 0

    def test_generate_with_payment_instructions(self, sample_invoice, company_info):
        """Test generating invoice with payment instructions."""
        generator = ReportLabInvoiceGenerator()

        payment_instructions = "Please pay within 30 days via bank transfer."

        pdf_bytes = generator.generate_invoice_pdf(
            invoice=sample_invoice,
            company_info=company_info,
            payment_instructions=payment_instructions,
        )

        assert isinstance(pdf_bytes, bytes)
        assert len(pdf_bytes) > 0

    def test_generate_with_notes(self, company_info, customer_info):
        """Test generating invoice with notes."""
        invoice = MoneyInvoice(
            invoice_number="INV-2025-002",
            customer_id="cust-456",
            billing_email="test@example.com",
            currency="USD",
            status="pending",
            payment_status="pending",
            issue_date=datetime.now(timezone.utc),
            line_items=[],
            subtotal=Money(amount="100.00", currency="USD"),
            total_amount=Money(amount="100.00", currency="USD"),
            net_amount_due=Money(amount="100.00", currency="USD"),
            notes="This is a test invoice with important notes.",
        )

        generator = ReportLabInvoiceGenerator()

        pdf_bytes = generator.generate_invoice_pdf(
            invoice=invoice,
            company_info=company_info,
            customer_info=customer_info,
        )

        assert isinstance(pdf_bytes, bytes)
        assert len(pdf_bytes) > 0

    def test_generate_with_locale(self, sample_invoice, company_info):
        """Test generating invoice with specific locale."""
        generator = ReportLabInvoiceGenerator()

        pdf_bytes = generator.generate_invoice_pdf(
            invoice=sample_invoice,
            company_info=company_info,
            locale="en_GB",
        )

        assert isinstance(pdf_bytes, bytes)
        assert len(pdf_bytes) > 0


class TestSaveToFile:
    """Test saving PDF to file."""

    def test_save_to_file(self, sample_invoice, company_info, tmp_path):
        """Test saving PDF to file."""
        output_path = str(tmp_path / "test_invoice.pdf")
        generator = ReportLabInvoiceGenerator()

        pdf_bytes = generator.generate_invoice_pdf(
            invoice=sample_invoice,
            company_info=company_info,
            output_path=output_path,
        )

        # Check that file was created
        import os

        assert os.path.exists(output_path)

        # Check that bytes are returned
        assert isinstance(pdf_bytes, bytes)
        assert len(pdf_bytes) > 0

    @patch("builtins.open", new_callable=mock_open)
    def test_save_writes_bytes(self, mock_file, sample_invoice):
        """Test that save writes correct bytes to file."""
        generator = ReportLabInvoiceGenerator()

        pdf_bytes = generator.generate_invoice_pdf(
            invoice=sample_invoice,
            output_path="/fake/path/invoice.pdf",
        )

        mock_file.assert_called_once_with("/fake/path/invoice.pdf", "wb")
        mock_file().write.assert_called_once()


class TestHeaderCreation:
    """Test invoice header creation."""

    def test_header_with_company_info(self, sample_invoice, company_info):
        """Test header includes company information."""
        generator = ReportLabInvoiceGenerator()

        header = generator._create_header(sample_invoice, company_info)

        assert len(header) > 0

    def test_header_without_company_info(self, sample_invoice):
        """Test header with default company info."""
        generator = ReportLabInvoiceGenerator()

        header = generator._create_header(sample_invoice, None)

        assert len(header) > 0

    def test_header_includes_invoice_number(self, sample_invoice, company_info):
        """Test header includes invoice number."""
        generator = ReportLabInvoiceGenerator()

        header = generator._create_header(sample_invoice, company_info)

        # Header should contain invoice number element
        assert len(header) > 0


class TestBillingSection:
    """Test billing details section."""

    def test_billing_section_with_customer_info(self, sample_invoice, customer_info):
        """Test billing section with customer information."""
        generator = ReportLabInvoiceGenerator()

        section = generator._create_billing_section(sample_invoice, customer_info)

        assert len(section) > 0

    def test_billing_section_without_customer_info(self, sample_invoice):
        """Test billing section without customer information."""
        generator = ReportLabInvoiceGenerator()

        section = generator._create_billing_section(sample_invoice, None)

        assert len(section) > 0

    def test_billing_section_includes_email(self, sample_invoice):
        """Test billing section includes email."""
        generator = ReportLabInvoiceGenerator()

        section = generator._create_billing_section(sample_invoice, None)

        assert len(section) > 0


class TestLineItemsTable:
    """Test line items table creation."""

    def test_line_items_table(self, sample_invoice):
        """Test creating line items table."""
        generator = ReportLabInvoiceGenerator()

        table = generator._create_line_items_table(sample_invoice, "en_US")

        assert len(table) > 0

    def test_line_items_includes_all_items(self, sample_invoice):
        """Test table includes all line items."""
        generator = ReportLabInvoiceGenerator()

        table = generator._create_line_items_table(sample_invoice, "en_US")

        # Should have items for header, line items, and spacer
        assert len(table) > 0

    def test_line_items_with_tax(self):
        """Test line items table with tax amounts."""
        invoice = MoneyInvoice(
            invoice_number="INV-TAX-001",
            customer_id="cust-789",
            billing_email="tax@example.com",
            currency="USD",
            status="pending",
            payment_status="pending",
            issue_date=datetime.now(timezone.utc),
            line_items=[
                MoneyLineItem(
                    description="Taxable Item",
                    quantity=1,
                    unit_price=Money(amount="100.00", currency="USD"),
                    tax_amount=Money(amount="8.25", currency="USD"),
                    total_price=Money(amount="108.25", currency="USD"),
                ),
            ],
            subtotal=Money(amount="100.00", currency="USD"),
            tax_amount=Money(amount="8.25", currency="USD"),
            total_amount=Money(amount="108.25", currency="USD"),
            net_amount_due=Money(amount="108.25", currency="USD"),
        )

        generator = ReportLabInvoiceGenerator()
        table = generator._create_line_items_table(invoice, "en_US")

        assert len(table) > 0


class TestTotalsSection:
    """Test totals section creation."""

    def test_totals_section_basic(self, sample_invoice):
        """Test basic totals section."""
        generator = ReportLabInvoiceGenerator()

        section = generator._create_totals_section(sample_invoice, "en_US")

        assert len(section) > 0

    def test_totals_with_discount(self):
        """Test totals section with discount."""
        invoice = MoneyInvoice(
            invoice_number="INV-DISC-001",
            customer_id="cust-discount",
            billing_email="discount@example.com",
            currency="USD",
            status="pending",
            payment_status="pending",
            issue_date=datetime.now(timezone.utc),
            line_items=[],
            subtotal=Money(amount="100.00", currency="USD"),
            discount_amount=Money(amount="10.00", currency="USD"),
            total_amount=Money(amount="90.00", currency="USD"),
            net_amount_due=Money(amount="90.00", currency="USD"),
        )

        generator = ReportLabInvoiceGenerator()
        section = generator._create_totals_section(invoice, "en_US")

        assert len(section) > 0

    def test_totals_with_credits(self):
        """Test totals section with applied credits."""
        invoice = MoneyInvoice(
            invoice_number="INV-CRED-001",
            customer_id="cust-credit",
            billing_email="credit@example.com",
            currency="USD",
            status="pending",
            payment_status="pending",
            issue_date=datetime.now(timezone.utc),
            line_items=[],
            subtotal=Money(amount="100.00", currency="USD"),
            total_amount=Money(amount="100.00", currency="USD"),
            total_credits_applied=Money(amount="20.00", currency="USD"),
            net_amount_due=Money(amount="80.00", currency="USD"),
        )

        generator = ReportLabInvoiceGenerator()
        section = generator._create_totals_section(invoice, "en_US")

        assert len(section) > 0


class TestStatusColor:
    """Test invoice status color mapping."""

    def test_draft_status_color(self):
        """Test color for draft status."""
        generator = ReportLabInvoiceGenerator()

        color = generator._get_status_color("draft")

        assert color is not None

    def test_pending_status_color(self):
        """Test color for pending status."""
        generator = ReportLabInvoiceGenerator()

        color = generator._get_status_color("pending")

        assert color is not None

    def test_paid_status_color(self):
        """Test color for paid status."""
        generator = ReportLabInvoiceGenerator()

        color = generator._get_status_color("paid")

        assert color is not None

    def test_overdue_status_color(self):
        """Test color for overdue status."""
        generator = ReportLabInvoiceGenerator()

        color = generator._get_status_color("overdue")

        assert color is not None

    def test_unknown_status_color(self):
        """Test default color for unknown status."""
        generator = ReportLabInvoiceGenerator()

        color = generator._get_status_color("unknown_status")

        assert color is not None


class TestBatchGeneration:
    """Test batch invoice generation."""

    def test_batch_generation(self, tmp_path):
        """Test generating multiple invoices in batch."""
        invoices = []
        for i in range(3):
            invoice = MoneyInvoice(
                invoice_number=f"INV-BATCH-{i:03d}",
                customer_id=f"cust-{i}",
                billing_email=f"customer{i}@example.com",
                currency="USD",
                status="pending",
                payment_status="pending",
                issue_date=datetime.now(timezone.utc),
                line_items=[],
                subtotal=Money(amount="100.00", currency="USD"),
                total_amount=Money(amount="100.00", currency="USD"),
                net_amount_due=Money(amount="100.00", currency="USD"),
            )
            invoices.append(invoice)

        generator = ReportLabInvoiceGenerator()
        output_dir = str(tmp_path / "batch_invoices")

        output_paths = generator.generate_batch_invoices(
            invoices=invoices,
            output_dir=output_dir,
        )

        assert len(output_paths) == 3

        # Check all files exist
        import os

        for path in output_paths:
            assert os.path.exists(path)

    def test_batch_with_company_info(self, tmp_path, company_info):
        """Test batch generation with company info."""
        invoices = [
            MoneyInvoice(
                invoice_number="INV-BATCH-COMPANY-001",
                customer_id="cust-batch",
                billing_email="batch@example.com",
                currency="USD",
                status="pending",
                payment_status="pending",
                issue_date=datetime.now(timezone.utc),
                line_items=[],
                subtotal=Money(amount="50.00", currency="USD"),
                total_amount=Money(amount="50.00", currency="USD"),
                net_amount_due=Money(amount="50.00", currency="USD"),
            ),
        ]

        generator = ReportLabInvoiceGenerator()
        output_dir = str(tmp_path / "batch_with_company")

        output_paths = generator.generate_batch_invoices(
            invoices=invoices,
            output_dir=output_dir,
            company_info=company_info,
        )

        assert len(output_paths) == 1


class TestConvenienceFunction:
    """Test convenience function."""

    def test_generate_invoice_pdf_reportlab(self, sample_invoice, company_info):
        """Test convenience function."""
        pdf_bytes = generate_invoice_pdf_reportlab(
            invoice=sample_invoice,
            company_info=company_info,
        )

        assert isinstance(pdf_bytes, bytes)
        assert len(pdf_bytes) > 0

    def test_default_generator_instance(self):
        """Test default generator instance exists."""
        assert default_reportlab_generator is not None
        assert isinstance(default_reportlab_generator, ReportLabInvoiceGenerator)
