"""
Tests for Secrets Metrics Router.

Tests caching, rate limiting, tenant isolation, and error handling
for the secrets metrics endpoint.
"""

import pytest
from httpx import AsyncClient
from unittest.mock import AsyncMock, patch, MagicMock
from datetime import datetime, timezone


class TestSecretsMetricsEndpoint:
    """Test secrets metrics endpoint."""

    async def test_get_secrets_metrics_success(
        self, authenticated_client: AsyncClient
    ):
        """Test successful retrieval of secrets metrics."""
        with patch(
            "dotmac.platform.secrets.metrics_router._get_secrets_metrics_cached"
        ) as mock_cached:
            mock_cached.return_value = {
                "total_secrets_accessed": 500,
                "total_secrets_created": 50,
                "total_secrets_updated": 30,
                "total_secrets_deleted": 10,
                "unique_secrets_accessed": 100,
                "unique_users_accessing": 25,
                "avg_accesses_per_secret": 5.0,
                "failed_access_attempts": 15,
                "after_hours_accesses": 50,
                "high_frequency_users": [
                    {"user_id": "user1", "access_count": 100},
                    {"user_id": "user2", "access_count": 80},
                ],
                "most_accessed_secrets": [
                    {"secret_path": "db/password", "access_count": 200},
                    {"secret_path": "api/key", "access_count": 150},
                ],
                "secrets_created_last_7d": 5,
                "secrets_deleted_last_7d": 2,
                "period": "30d",
                "timestamp": datetime.now(timezone.utc),
            }

            response = await authenticated_client.get(
                "/api/v1/secrets/metrics?period_days=30"
            )

            assert response.status_code == 200
            data = response.json()
            assert data["total_secrets_accessed"] == 500
            assert data["total_secrets_created"] == 50
            assert data["unique_secrets_accessed"] == 100
            assert data["unique_users_accessing"] == 25
            assert data["avg_accesses_per_secret"] == 5.0
            assert data["failed_access_attempts"] == 15
            assert data["after_hours_accesses"] == 50
            assert len(data["high_frequency_users"]) == 2
            assert len(data["most_accessed_secrets"]) == 2
            assert data["period"] == "30d"

    async def test_get_secrets_metrics_security_indicators(
        self, authenticated_client: AsyncClient
    ):
        """Test security indicator metrics."""
        with patch(
            "dotmac.platform.secrets.metrics_router._get_secrets_metrics_cached"
        ) as mock_cached:
            mock_cached.return_value = {
                "total_secrets_accessed": 200,
                "total_secrets_created": 20,
                "total_secrets_updated": 10,
                "total_secrets_deleted": 5,
                "unique_secrets_accessed": 50,
                "unique_users_accessing": 10,
                "avg_accesses_per_secret": 4.0,
                "failed_access_attempts": 25,
                "after_hours_accesses": 75,
                "high_frequency_users": [],
                "most_accessed_secrets": [],
                "secrets_created_last_7d": 3,
                "secrets_deleted_last_7d": 1,
                "period": "30d",
                "timestamp": datetime.now(timezone.utc),
            }

            response = await authenticated_client.get(
                "/api/v1/secrets/metrics",
                
            )

            assert response.status_code == 200
            data = response.json()
            # Security indicators
            assert data["failed_access_attempts"] == 25
            assert data["after_hours_accesses"] == 75

    async def test_get_secrets_metrics_no_activity(
        self, authenticated_client: AsyncClient
    ):
        """Test metrics when no secret activity exists."""
        with patch(
            "dotmac.platform.secrets.metrics_router._get_secrets_metrics_cached"
        ) as mock_cached:
            mock_cached.return_value = {
                "total_secrets_accessed": 0,
                "total_secrets_created": 0,
                "total_secrets_updated": 0,
                "total_secrets_deleted": 0,
                "unique_secrets_accessed": 0,
                "unique_users_accessing": 0,
                "avg_accesses_per_secret": 0.0,
                "failed_access_attempts": 0,
                "after_hours_accesses": 0,
                "high_frequency_users": [],
                "most_accessed_secrets": [],
                "secrets_created_last_7d": 0,
                "secrets_deleted_last_7d": 0,
                "period": "30d",
                "timestamp": datetime.now(timezone.utc),
            }

            response = await authenticated_client.get(
                "/api/v1/secrets/metrics",
                
            )

            assert response.status_code == 200
            data = response.json()
            assert data["total_secrets_accessed"] == 0
            assert data["unique_users_accessing"] == 0

    async def test_get_secrets_metrics_top_users_and_secrets(
        self, authenticated_client: AsyncClient
    ):
        """Test top users and secrets are correctly returned."""
        with patch(
            "dotmac.platform.secrets.metrics_router._get_secrets_metrics_cached"
        ) as mock_cached:
            high_frequency_users = [
                {"user_id": f"user_{i}", "access_count": 100 - i * 10}
                for i in range(10)
            ]
            most_accessed_secrets = [
                {"secret_path": f"secret/path/{i}", "access_count": 200 - i * 20}
                for i in range(10)
            ]

            mock_cached.return_value = {
                "total_secrets_accessed": 1000,
                "total_secrets_created": 100,
                "total_secrets_updated": 50,
                "total_secrets_deleted": 20,
                "unique_secrets_accessed": 200,
                "unique_users_accessing": 50,
                "avg_accesses_per_secret": 5.0,
                "failed_access_attempts": 30,
                "after_hours_accesses": 100,
                "high_frequency_users": high_frequency_users,
                "most_accessed_secrets": most_accessed_secrets,
                "secrets_created_last_7d": 10,
                "secrets_deleted_last_7d": 5,
                "period": "30d",
                "timestamp": datetime.now(timezone.utc),
            }

            response = await authenticated_client.get(
                "/api/v1/secrets/metrics",
                
            )

            assert response.status_code == 200
            data = response.json()
            assert len(data["high_frequency_users"]) == 10
            assert data["high_frequency_users"][0]["user_id"] == "user_0"
            assert data["high_frequency_users"][0]["access_count"] == 100
            assert len(data["most_accessed_secrets"]) == 10
            assert data["most_accessed_secrets"][0]["secret_path"] == "secret/path/0"
            assert data["most_accessed_secrets"][0]["access_count"] == 200

    async def test_get_secrets_metrics_different_periods(
        self, authenticated_client: AsyncClient
    ):
        """Test metrics with different time periods."""
        with patch(
            "dotmac.platform.secrets.metrics_router._get_secrets_metrics_cached"
        ) as mock_cached:
            mock_cached.return_value = {
                "total_secrets_accessed": 50,
                "total_secrets_created": 5,
                "total_secrets_updated": 3,
                "total_secrets_deleted": 1,
                "unique_secrets_accessed": 10,
                "unique_users_accessing": 5,
                "avg_accesses_per_secret": 5.0,
                "failed_access_attempts": 2,
                "after_hours_accesses": 10,
                "high_frequency_users": [],
                "most_accessed_secrets": [],
                "secrets_created_last_7d": 2,
                "secrets_deleted_last_7d": 1,
                "period": "7d",
                "timestamp": datetime.now(timezone.utc),
            }

            response = await authenticated_client.get(
                "/api/v1/secrets/metrics?period_days=7",
                
            )

            assert response.status_code == 200
            data = response.json()
            assert data["period"] == "7d"

    async def test_get_secrets_metrics_invalid_period(
        self, authenticated_client: AsyncClient
    ):
        """Test validation of period_days parameter."""
        response = await authenticated_client.get(
            "/api/v1/secrets/metrics?period_days=0",
            
        )
        assert response.status_code == 422

        response = await authenticated_client.get(
            "/api/v1/secrets/metrics?period_days=400",
            
        )
        assert response.status_code == 422

    async def test_get_secrets_metrics_requires_auth(self, test_client: AsyncClient):
        """Test that endpoint requires authentication."""
        response = await test_client.get("/api/v1/secrets/metrics")
        assert response.status_code == 401

    async def test_get_secrets_metrics_error_handling(
        self, authenticated_client: AsyncClient
    ):
        """Test error handling returns safe defaults."""
        with patch(
            "dotmac.platform.secrets.metrics_router._get_secrets_metrics_cached"
        ) as mock_cached:
            mock_cached.side_effect = Exception("Database error")

            response = await authenticated_client.get(
                "/api/v1/secrets/metrics",
                
            )

            assert response.status_code == 200
            data = response.json()
            assert data["total_secrets_accessed"] == 0
            assert data["unique_secrets_accessed"] == 0

    async def test_secrets_metrics_caching(
        self, authenticated_client: AsyncClient
    ):
        """Test that results are cached."""
        with patch(
            "dotmac.platform.secrets.metrics_router._get_secrets_metrics_cached"
        ) as mock_cached:
            mock_data = {
                "total_secrets_accessed": 250,
                "total_secrets_created": 25,
                "total_secrets_updated": 15,
                "total_secrets_deleted": 5,
                "unique_secrets_accessed": 50,
                "unique_users_accessing": 12,
                "avg_accesses_per_secret": 5.0,
                "failed_access_attempts": 10,
                "after_hours_accesses": 25,
                "high_frequency_users": [{"user_id": "user1", "access_count": 50}],
                "most_accessed_secrets": [
                    {"secret_path": "secret1", "access_count": 100}
                ],
                "secrets_created_last_7d": 3,
                "secrets_deleted_last_7d": 1,
                "period": "30d",
                "timestamp": datetime.now(timezone.utc),
            }
            mock_cached.return_value = mock_data

            response1 = await authenticated_client.get(
                "/api/v1/secrets/metrics",
                
            )
            assert response1.status_code == 200

            response2 = await authenticated_client.get(
                "/api/v1/secrets/metrics",
                
            )
            assert response2.status_code == 200

            assert (
                response1.json()["total_secrets_accessed"]
                == response2.json()["total_secrets_accessed"]
            )


class TestSecretsMetricsTenantIsolation:
    """Test tenant isolation for secrets metrics."""

    async def test_tenant_isolation_in_cache_key(
        self, authenticated_client: AsyncClient
    ):
        """Test that cache keys include tenant ID."""
        with patch(
            "dotmac.platform.secrets.metrics_router._get_secrets_metrics_cached"
        ) as mock_cached:
            mock_cached.return_value = {
                "total_secrets_accessed": 100,
                "total_secrets_created": 10,
                "total_secrets_updated": 5,
                "total_secrets_deleted": 2,
                "unique_secrets_accessed": 20,
                "unique_users_accessing": 5,
                "avg_accesses_per_secret": 5.0,
                "failed_access_attempts": 5,
                "after_hours_accesses": 10,
                "high_frequency_users": [],
                "most_accessed_secrets": [],
                "secrets_created_last_7d": 2,
                "secrets_deleted_last_7d": 1,
                "period": "30d",
                "timestamp": datetime.now(timezone.utc),
            }

            response = await authenticated_client.get(
                "/api/v1/secrets/metrics",
                
            )

            assert response.status_code == 200
            assert mock_cached.called
            call_kwargs = mock_cached.call_args[1]
            assert "tenant_id" in call_kwargs
