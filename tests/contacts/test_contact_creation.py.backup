"""
Contact service tests - extracted from comprehensive test file.
"""

from datetime import datetime, timezone
from decimal import Decimal
from typing import Any, Dict, List
from unittest.mock import AsyncMock, Mock, MagicMock, patch
from uuid import UUID, uuid4

import pytest
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from dotmac.platform.contacts.models import (
    Contact,
    ContactMethod,
    ContactMethodType,
    ContactLabelDefinition,
    ContactFieldDefinition,
    ContactActivity,
    ContactStatus,
    ContactStage,
    ContactFieldType,
)
from dotmac.platform.contacts.schemas import (
    ContactCreate,
    ContactUpdate,
    ContactMethodCreate,
    ContactMethodUpdate,
    ContactLabelDefinitionCreate,
    ContactFieldDefinitionCreate,
    ContactActivityCreate,
)
from dotmac.platform.contacts.service import (
    ContactService,
    ContactLabelService,
    ContactFieldService,
)

pytestmark = pytest.mark.asyncio


class TestContactCreation:
    """Test contact creation."""

    @pytest.mark.asyncio
    async def test_create_contact_success(self, mock_db_session, tenant_id, customer_id, user_id):
        """Test successful contact creation."""
        service = ContactService(mock_db_session)

        contact_data = ContactCreate(
            customer_id=customer_id,
            first_name="John",
            last_name="Doe",
            display_name="John Doe",
            company="ACME Corp",
            job_title="CEO",
        )

        mock_db_session.flush = AsyncMock()
        mock_db_session.commit = AsyncMock()
        mock_db_session.refresh = AsyncMock()

        contact = await service.create_contact(
            contact_data=contact_data, tenant_id=tenant_id, owner_id=user_id
        )

        mock_db_session.add.assert_called_once()
        mock_db_session.flush.assert_called_once()
        mock_db_session.commit.assert_called_once()

    @pytest.mark.asyncio
    async def test_create_contact_with_auto_display_name(
        self, mock_db_session, tenant_id, customer_id
    ):
        """Test contact creation with auto-generated display name."""
        service = ContactService(mock_db_session)

        contact_data = ContactCreate(
            customer_id=customer_id,
            first_name="Jane",
            last_name="Smith",
            # No display_name provided
        )

        mock_db_session.flush = AsyncMock()
        mock_db_session.commit = AsyncMock()
        mock_db_session.refresh = AsyncMock()

        contact = await service.create_contact(contact_data=contact_data, tenant_id=tenant_id)

        mock_db_session.add.assert_called_once()
        added_contact = mock_db_session.add.call_args[0][0]
        assert added_contact.display_name == "Jane Smith"

    @pytest.mark.asyncio
    async def test_create_contact_with_company_fallback_name(
        self, mock_db_session, tenant_id, customer_id
    ):
        """Test contact creation with company name fallback."""
        service = ContactService(mock_db_session)

        contact_data = ContactCreate(
            customer_id=customer_id,
            company="TechCorp Inc",
            # No first_name, last_name, or display_name
        )

        mock_db_session.flush = AsyncMock()
        mock_db_session.commit = AsyncMock()
        mock_db_session.refresh = AsyncMock()

        contact = await service.create_contact(contact_data=contact_data, tenant_id=tenant_id)

        mock_db_session.add.assert_called_once()
        added_contact = mock_db_session.add.call_args[0][0]
        assert added_contact.display_name == "TechCorp Inc"

    @pytest.mark.asyncio
    async def test_create_contact_with_contact_methods(
        self, mock_db_session, tenant_id, customer_id
    ):
        """Test contact creation with contact methods."""
        service = ContactService(mock_db_session)

        contact_data = ContactCreate(
            customer_id=customer_id,
            first_name="John",
            last_name="Doe",
            contact_methods=[
                ContactMethodCreate(
                    type=ContactMethodType.EMAIL,
                    value="john@example.com",
                    label="Work",
                    is_primary=True,
                ),
                ContactMethodCreate(
                    type=ContactMethodType.PHONE,
                    value="+1234567890",
                    label="Mobile",
                ),
            ],
        )

        mock_db_session.flush = AsyncMock()
        mock_db_session.commit = AsyncMock()
        mock_db_session.refresh = AsyncMock()

        contact = await service.create_contact(contact_data=contact_data, tenant_id=tenant_id)

        # Should add contact + 2 methods = 3 calls
        assert mock_db_session.add.call_count == 3

    @pytest.mark.asyncio
    async def test_create_contact_with_address_method(
        self, mock_db_session, tenant_id, customer_id
    ):
        """Test contact creation with address contact method."""
        service = ContactService(mock_db_session)

        contact_data = ContactCreate(
            customer_id=customer_id,
            first_name="John",
            last_name="Doe",
            contact_methods=[
                ContactMethodCreate(
                    type=ContactMethodType.ADDRESS,
                    value="123 Main St",
                    label="Office",
                    address_line1="123 Main St",
                    address_line2="Suite 100",
                    city="New York",
                    state_province="NY",
                    postal_code="10001",
                    country="US",
                )
            ],
        )

        mock_db_session.flush = AsyncMock()
        mock_db_session.commit = AsyncMock()
        mock_db_session.refresh = AsyncMock()

        contact = await service.create_contact(contact_data=contact_data, tenant_id=tenant_id)

        # Verify address fields were set
        assert mock_db_session.add.call_count == 2  # contact + method

    @pytest.mark.asyncio
    async def test_create_contact_with_labels(
        self, mock_db_session, tenant_id, customer_id, sample_label_definition
    ):
        """Test contact creation with labels."""
        service = ContactService(mock_db_session)

        label_ids = [sample_label_definition.id]
        contact_data = ContactCreate(
            customer_id=customer_id,
            first_name="John",
            last_name="Doe",
            label_ids=label_ids,
        )

        # Mock label query to return empty list (simplified to avoid relationship issues)
        mock_result = Mock()
        mock_result.scalars.return_value.all.return_value = []
        mock_db_session.execute = AsyncMock(return_value=mock_result)

        mock_db_session.flush = AsyncMock()
        mock_db_session.commit = AsyncMock()
        mock_db_session.refresh = AsyncMock()

        contact = await service.create_contact(contact_data=contact_data, tenant_id=tenant_id)

        # Verify that the service queried for labels
        mock_db_session.execute.assert_called_once()
        mock_db_session.add.assert_called_once()
