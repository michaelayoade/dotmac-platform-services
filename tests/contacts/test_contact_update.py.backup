"""
Contact service tests - extracted from comprehensive test file.
"""

from datetime import datetime, timezone
from decimal import Decimal
from typing import Any, Dict, List
from unittest.mock import AsyncMock, Mock, MagicMock, patch
from uuid import UUID, uuid4

import pytest
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from dotmac.platform.contacts.models import (
    Contact,
    ContactMethod,
    ContactMethodType,
    ContactLabelDefinition,
    ContactFieldDefinition,
    ContactActivity,
    ContactStatus,
    ContactStage,
    ContactFieldType,
)
from dotmac.platform.contacts.schemas import (
    ContactCreate,
    ContactUpdate,
    ContactMethodCreate,
    ContactMethodUpdate,
    ContactLabelDefinitionCreate,
    ContactFieldDefinitionCreate,
    ContactActivityCreate,
)
from dotmac.platform.contacts.service import (
    ContactService,
    ContactLabelService,
    ContactFieldService,
)

pytestmark = pytest.mark.asyncio


class TestContactUpdate:
    """Test contact updates."""

    @pytest.mark.asyncio
    async def test_update_contact_success(self, mock_db_session, tenant_id, sample_contact):
        """Test successful contact update."""
        service = ContactService(mock_db_session)

        update_data = ContactUpdate(
            first_name="Jane",
            job_title="CTO",
        )

        # Mock get_contact
        mock_result = Mock()
        mock_result.scalar_one_or_none.return_value = sample_contact
        mock_db_session.execute = AsyncMock(return_value=mock_result)

        mock_db_session.commit = AsyncMock()
        mock_db_session.refresh = AsyncMock()

        with patch("dotmac.platform.contacts.service.cache_get", return_value=None):
            with patch("dotmac.platform.contacts.service.cache_delete"):
                contact = await service.update_contact(
                    contact_id=sample_contact.id, contact_data=update_data, tenant_id=tenant_id
                )

        mock_db_session.commit.assert_called_once()
        mock_db_session.refresh.assert_called_once()

    @pytest.mark.asyncio
    async def test_update_contact_not_found(self, mock_db_session, tenant_id):
        """Test updating non-existent contact."""
        service = ContactService(mock_db_session)

        update_data = ContactUpdate(first_name="Jane")

        mock_result = Mock()
        mock_result.scalar_one_or_none.return_value = None
        mock_db_session.execute = AsyncMock(return_value=mock_result)

        with patch("dotmac.platform.contacts.service.cache_get", return_value=None):
            contact = await service.update_contact(
                contact_id=uuid4(), contact_data=update_data, tenant_id=tenant_id
            )

        assert contact is None
        mock_db_session.commit.assert_not_called()
