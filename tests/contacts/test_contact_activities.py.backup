"""
Contact service tests - extracted from comprehensive test file.
"""

from datetime import datetime, timezone
from decimal import Decimal
from typing import Any, Dict, List
from unittest.mock import AsyncMock, Mock, MagicMock, patch
from uuid import UUID, uuid4

import pytest
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from dotmac.platform.contacts.models import (
    Contact,
    ContactMethod,
    ContactMethodType,
    ContactLabelDefinition,
    ContactFieldDefinition,
    ContactActivity,
    ContactStatus,
    ContactStage,
    ContactFieldType,
)
from dotmac.platform.contacts.schemas import (
    ContactCreate,
    ContactUpdate,
    ContactMethodCreate,
    ContactMethodUpdate,
    ContactLabelDefinitionCreate,
    ContactFieldDefinitionCreate,
    ContactActivityCreate,
)
from dotmac.platform.contacts.service import (
    ContactService,
    ContactLabelService,
    ContactFieldService,
)

pytestmark = pytest.mark.asyncio


class TestContactActivities:
    """Test contact activity management."""

    @pytest.mark.asyncio
    async def test_add_contact_activity_success(
        self, mock_db_session, tenant_id, sample_contact, user_id
    ):
        """Test successfully adding a contact activity."""
        service = ContactService(mock_db_session)

        activity_data = ContactActivityCreate(
            activity_type="call",
            subject="Follow-up call",
            description="Discussed project status",
            status="completed",
            outcome="positive",
            duration_minutes=15,
        )

        mock_result = Mock()
        mock_result.scalar_one_or_none.return_value = sample_contact
        mock_db_session.execute = AsyncMock(return_value=mock_result)

        mock_db_session.commit = AsyncMock()
        mock_db_session.refresh = AsyncMock()

        with patch("dotmac.platform.contacts.service.cache_get", return_value=None):
            activity = await service.add_contact_activity(
                contact_id=sample_contact.id,
                activity_data=activity_data,
                tenant_id=tenant_id,
                performed_by=user_id,
            )

        mock_db_session.add.assert_called_once()
        mock_db_session.commit.assert_called_once()

    @pytest.mark.asyncio
    async def test_add_contact_activity_not_found(self, mock_db_session, tenant_id, user_id):
        """Test adding activity to non-existent contact."""
        service = ContactService(mock_db_session)

        activity_data = ContactActivityCreate(activity_type="email", subject="Test", status="sent")

        mock_result = Mock()
        mock_result.scalar_one_or_none.return_value = None
        mock_db_session.execute = AsyncMock(return_value=mock_result)

        with patch("dotmac.platform.contacts.service.cache_get", return_value=None):
            activity = await service.add_contact_activity(
                contact_id=uuid4(),
                activity_data=activity_data,
                tenant_id=tenant_id,
                performed_by=user_id,
            )

        assert activity is None
        mock_db_session.add.assert_not_called()

    @pytest.mark.asyncio
    async def test_get_contact_activities_success(
        self, mock_db_session, tenant_id, sample_contact, sample_activity
    ):
        """Test getting contact activities."""
        service = ContactService(mock_db_session)

        # Mock get_contact
        mock_contact_result = Mock()
        mock_contact_result.scalar_one_or_none.return_value = sample_contact

        # Mock activities query
        mock_activities_result = Mock()
        mock_activities_result.scalars.return_value.all.return_value = [sample_activity]

        mock_db_session.execute = AsyncMock(
            side_effect=[mock_contact_result, mock_activities_result]
        )

        with patch("dotmac.platform.contacts.service.cache_get", return_value=None):
            activities = await service.get_contact_activities(
                contact_id=sample_contact.id, tenant_id=tenant_id
            )

        assert len(activities) == 1
        assert activities[0] == sample_activity

    @pytest.mark.asyncio
    async def test_get_contact_activities_not_found(self, mock_db_session, tenant_id):
        """Test getting activities for non-existent contact."""
        service = ContactService(mock_db_session)

        mock_result = Mock()
        mock_result.scalar_one_or_none.return_value = None
        mock_db_session.execute = AsyncMock(return_value=mock_result)

        with patch("dotmac.platform.contacts.service.cache_get", return_value=None):
            activities = await service.get_contact_activities(
                contact_id=uuid4(), tenant_id=tenant_id
            )

        assert activities == []

    @pytest.mark.asyncio
    async def test_get_contact_activities_with_pagination(
        self, mock_db_session, tenant_id, sample_contact, sample_activity
    ):
        """Test getting contact activities with pagination."""
        service = ContactService(mock_db_session)

        mock_contact_result = Mock()
        mock_contact_result.scalar_one_or_none.return_value = sample_contact

        mock_activities_result = Mock()
        mock_activities_result.scalars.return_value.all.return_value = [sample_activity]

        mock_db_session.execute = AsyncMock(
            side_effect=[mock_contact_result, mock_activities_result]
        )

        with patch("dotmac.platform.contacts.service.cache_get", return_value=None):
            activities = await service.get_contact_activities(
                contact_id=sample_contact.id, tenant_id=tenant_id, limit=10, offset=5
            )

        assert len(activities) == 1


# ============================================================================
# ContactLabelService Tests
# ============================================================================
