"""
Contact service tests - extracted from comprehensive test file.
"""

from datetime import datetime, timezone
from decimal import Decimal
from typing import Any, Dict, List
from unittest.mock import AsyncMock, Mock, MagicMock, patch
from uuid import UUID, uuid4

import pytest
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from dotmac.platform.contacts.models import (
    Contact,
    ContactMethod,
    ContactMethodType,
    ContactLabelDefinition,
    ContactFieldDefinition,
    ContactActivity,
    ContactStatus,
    ContactStage,
    ContactFieldType,
)
from dotmac.platform.contacts.schemas import (
    ContactCreate,
    ContactUpdate,
    ContactMethodCreate,
    ContactMethodUpdate,
    ContactLabelDefinitionCreate,
    ContactFieldDefinitionCreate,
    ContactActivityCreate,
)
from dotmac.platform.contacts.service import (
    ContactService,
    ContactLabelService,
    ContactFieldService,
)

pytestmark = pytest.mark.asyncio


class TestContactSearch:
    """Test contact search and filtering."""

    @pytest.mark.asyncio
    async def test_search_contacts_no_filters(self, mock_db_session, tenant_id, sample_contact):
        """Test searching contacts with no filters."""
        service = ContactService(mock_db_session)

        mock_result = Mock()
        mock_result.scalars.return_value.all.return_value = [sample_contact]
        mock_db_session.execute = AsyncMock(return_value=mock_result)
        mock_db_session.scalar = AsyncMock(return_value=1)

        contacts, total = await service.search_contacts(tenant_id=tenant_id)

        assert len(contacts) == 1
        assert total == 1
        mock_db_session.execute.assert_called()

    @pytest.mark.asyncio
    async def test_search_contacts_with_query(self, mock_db_session, tenant_id, sample_contact):
        """Test searching contacts with text query."""
        service = ContactService(mock_db_session)

        mock_result = Mock()
        mock_result.scalars.return_value.all.return_value = [sample_contact]
        mock_db_session.execute = AsyncMock(return_value=mock_result)
        mock_db_session.scalar = AsyncMock(return_value=1)

        contacts, total = await service.search_contacts(tenant_id=tenant_id, query="John")

        assert len(contacts) == 1
        assert total == 1

    @pytest.mark.asyncio
    async def test_search_contacts_with_status_filter(
        self, mock_db_session, tenant_id, sample_contact
    ):
        """Test searching contacts with status filter."""
        service = ContactService(mock_db_session)

        mock_result = Mock()
        mock_result.scalars.return_value.all.return_value = [sample_contact]
        mock_db_session.execute = AsyncMock(return_value=mock_result)
        mock_db_session.scalar = AsyncMock(return_value=1)

        contacts, total = await service.search_contacts(
            tenant_id=tenant_id, status=ContactStatus.ACTIVE
        )

        assert len(contacts) == 1

    @pytest.mark.asyncio
    async def test_search_contacts_with_stage_filter(
        self, mock_db_session, tenant_id, sample_contact
    ):
        """Test searching contacts with stage filter."""
        service = ContactService(mock_db_session)

        mock_result = Mock()
        mock_result.scalars.return_value.all.return_value = [sample_contact]
        mock_db_session.execute = AsyncMock(return_value=mock_result)
        mock_db_session.scalar = AsyncMock(return_value=1)

        contacts, total = await service.search_contacts(
            tenant_id=tenant_id, stage=ContactStage.CUSTOMER
        )

        assert len(contacts) == 1

    @pytest.mark.asyncio
    async def test_search_contacts_with_tags_filter(
        self, mock_db_session, tenant_id, sample_contact
    ):
        """Test searching contacts with tags filter."""
        service = ContactService(mock_db_session)

        mock_result = Mock()
        mock_result.scalars.return_value.all.return_value = [sample_contact]
        mock_db_session.execute = AsyncMock(return_value=mock_result)
        mock_db_session.scalar = AsyncMock(return_value=1)

        contacts, total = await service.search_contacts(tenant_id=tenant_id, tags=["vip"])

        assert len(contacts) == 1

    @pytest.mark.asyncio
    async def test_search_contacts_with_pagination(
        self, mock_db_session, tenant_id, sample_contact
    ):
        """Test searching contacts with pagination."""
        service = ContactService(mock_db_session)

        mock_result = Mock()
        mock_result.scalars.return_value.all.return_value = [sample_contact]
        mock_db_session.execute = AsyncMock(return_value=mock_result)
        mock_db_session.scalar = AsyncMock(return_value=100)

        contacts, total = await service.search_contacts(tenant_id=tenant_id, limit=10, offset=20)

        assert len(contacts) == 1
        assert total == 100

    @pytest.mark.asyncio
    async def test_search_contacts_include_deleted(
        self, mock_db_session, tenant_id, sample_contact
    ):
        """Test searching contacts including deleted."""
        service = ContactService(mock_db_session)

        mock_result = Mock()
        mock_result.scalars.return_value.all.return_value = [sample_contact]
        mock_db_session.execute = AsyncMock(return_value=mock_result)
        mock_db_session.scalar = AsyncMock(return_value=1)

        contacts, total = await service.search_contacts(tenant_id=tenant_id, include_deleted=True)

        assert len(contacts) == 1


# ============================================================================
# ContactMethod Tests
# ============================================================================
