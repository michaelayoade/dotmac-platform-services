"""
Contact service tests - extracted from comprehensive test file.
"""

from datetime import datetime, timezone
from decimal import Decimal
from typing import Any, Dict, List
from unittest.mock import AsyncMock, Mock, MagicMock, patch
from uuid import UUID, uuid4

import pytest
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from dotmac.platform.contacts.models import (
    Contact,
    ContactMethod,
    ContactMethodType,
    ContactLabelDefinition,
    ContactFieldDefinition,
    ContactActivity,
    ContactStatus,
    ContactStage,
    ContactFieldType,
)
from dotmac.platform.contacts.schemas import (
    ContactCreate,
    ContactUpdate,
    ContactMethodCreate,
    ContactMethodUpdate,
    ContactLabelDefinitionCreate,
    ContactFieldDefinitionCreate,
    ContactActivityCreate,
)
from dotmac.platform.contacts.service import (
    ContactService,
    ContactLabelService,
    ContactFieldService,
)

pytestmark = pytest.mark.asyncio


class TestContactRetrieval:
    """Test contact retrieval."""

    @pytest.mark.asyncio
    async def test_get_contact_success(self, mock_db_session, tenant_id, sample_contact):
        """Test successful contact retrieval."""
        service = ContactService(mock_db_session)

        mock_result = Mock()
        mock_result.scalar_one_or_none.return_value = sample_contact
        mock_db_session.execute = AsyncMock(return_value=mock_result)

        with patch("dotmac.platform.contacts.service.cache_get", return_value=None):
            contact = await service.get_contact(contact_id=sample_contact.id, tenant_id=tenant_id)

        assert contact == sample_contact
        mock_db_session.execute.assert_called_once()

    @pytest.mark.asyncio
    async def test_get_contact_not_found(self, mock_db_session, tenant_id):
        """Test getting non-existent contact."""
        service = ContactService(mock_db_session)

        mock_result = Mock()
        mock_result.scalar_one_or_none.return_value = None
        mock_db_session.execute = AsyncMock(return_value=mock_result)

        with patch("dotmac.platform.contacts.service.cache_get", return_value=None):
            contact = await service.get_contact(contact_id=uuid4(), tenant_id=tenant_id)

        assert contact is None

    @pytest.mark.asyncio
    async def test_get_contact_with_cache_hit(self, mock_db_session, tenant_id, sample_contact):
        """Test contact retrieval with cache hit."""
        service = ContactService(mock_db_session)

        with patch("dotmac.platform.contacts.service.cache_get", return_value=sample_contact):
            contact = await service.get_contact(
                contact_id=sample_contact.id,
                tenant_id=tenant_id,
                include_methods=False,
                include_labels=False,
            )

        assert contact == sample_contact
        mock_db_session.execute.assert_not_called()

    @pytest.mark.asyncio
    async def test_get_contact_with_relationships(self, mock_db_session, tenant_id, sample_contact):
        """Test contact retrieval with relationships loaded."""
        service = ContactService(mock_db_session)

        mock_result = Mock()
        mock_result.scalar_one_or_none.return_value = sample_contact
        mock_db_session.execute = AsyncMock(return_value=mock_result)

        with patch("dotmac.platform.contacts.service.cache_get", return_value=None):
            contact = await service.get_contact(
                contact_id=sample_contact.id,
                tenant_id=tenant_id,
                include_methods=True,
                include_labels=True,
            )

        assert contact == sample_contact
        mock_db_session.execute.assert_called_once()
