"""
Contact service tests - extracted from comprehensive test file.
"""

from datetime import datetime, timezone
from decimal import Decimal
from typing import Any, Dict, List
from unittest.mock import AsyncMock, Mock, MagicMock, patch
from uuid import UUID, uuid4

import pytest
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from dotmac.platform.contacts.models import (
    Contact,
    ContactMethod,
    ContactMethodType,
    ContactLabelDefinition,
    ContactFieldDefinition,
    ContactActivity,
    ContactStatus,
    ContactStage,
    ContactFieldType,
)
from dotmac.platform.contacts.schemas import (
    ContactCreate,
    ContactUpdate,
    ContactMethodCreate,
    ContactMethodUpdate,
    ContactLabelDefinitionCreate,
    ContactFieldDefinitionCreate,
    ContactActivityCreate,
)
from dotmac.platform.contacts.service import (
    ContactService,
    ContactLabelService,
    ContactFieldService,
)

pytestmark = pytest.mark.asyncio


class TestContactDeletion:
    """Test contact deletion."""

    @pytest.mark.asyncio
    async def test_soft_delete_contact_success(
        self, mock_db_session, tenant_id, sample_contact, user_id
    ):
        """Test successful soft delete."""
        service = ContactService(mock_db_session)

        mock_result = Mock()
        mock_result.scalar_one_or_none.return_value = sample_contact
        mock_db_session.execute = AsyncMock(return_value=mock_result)

        mock_db_session.commit = AsyncMock()

        with patch("dotmac.platform.contacts.service.cache_get", return_value=None):
            with patch("dotmac.platform.contacts.service.cache_delete"):
                result = await service.delete_contact(
                    contact_id=sample_contact.id,
                    tenant_id=tenant_id,
                    hard_delete=False,
                    deleted_by=user_id,
                )

        assert result is True
        assert sample_contact.deleted_at is not None
        assert sample_contact.deleted_by == user_id
        mock_db_session.commit.assert_called_once()

    @pytest.mark.asyncio
    async def test_hard_delete_contact_success(self, mock_db_session, tenant_id, sample_contact):
        """Test successful hard delete."""
        service = ContactService(mock_db_session)

        mock_result = Mock()
        mock_result.scalar_one_or_none.return_value = sample_contact
        mock_db_session.execute = AsyncMock(return_value=mock_result)

        mock_db_session.delete = AsyncMock()
        mock_db_session.commit = AsyncMock()

        with patch("dotmac.platform.contacts.service.cache_get", return_value=None):
            with patch("dotmac.platform.contacts.service.cache_delete"):
                result = await service.delete_contact(
                    contact_id=sample_contact.id, tenant_id=tenant_id, hard_delete=True
                )

        assert result is True
        mock_db_session.delete.assert_called_once_with(sample_contact)
        mock_db_session.commit.assert_called_once()

    @pytest.mark.asyncio
    async def test_delete_contact_not_found(self, mock_db_session, tenant_id):
        """Test deleting non-existent contact."""
        service = ContactService(mock_db_session)

        mock_result = Mock()
        mock_result.scalar_one_or_none.return_value = None
        mock_db_session.execute = AsyncMock(return_value=mock_result)

        with patch("dotmac.platform.contacts.service.cache_get", return_value=None):
            result = await service.delete_contact(contact_id=uuid4(), tenant_id=tenant_id)

        assert result is False
        mock_db_session.delete.assert_not_called()
