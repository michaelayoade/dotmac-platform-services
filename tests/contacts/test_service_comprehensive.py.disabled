"""
Comprehensive tests for contacts service.

Tests CRUD operations, contact methods, labels, activities,
search, and business logic.
"""

import pytest
from datetime import datetime, timezone, date
from uuid import uuid4
from unittest.mock import AsyncMock, MagicMock, patch

from dotmac.platform.contacts.service import ContactService
from dotmac.platform.contacts.models import (
    Contact,
    ContactMethod,
    ContactMethodType,
    ContactStatus,
    ContactStage,
)
from dotmac.platform.contacts.schemas import (
    ContactCreate,
    ContactUpdate,
    ContactMethodCreate,
)


@pytest.fixture
def mock_db_session():
    """Create mock database session."""
    session = AsyncMock()
    session.add = MagicMock()
    session.flush = AsyncMock()
    session.commit = AsyncMock()
    session.refresh = AsyncMock()
    session.execute = AsyncMock()
    session.delete = AsyncMock()
    return session


@pytest.fixture
def contact_service(mock_db_session):
    """Create contact service instance."""
    return ContactService(mock_db_session)


@pytest.fixture
def tenant_id():
    """Provide test tenant ID."""
    return uuid4()


@pytest.fixture
def sample_contact_create():
    """Create sample contact creation data."""
    return ContactCreate(
        first_name="John",
        last_name="Doe",
        company="Acme Corp",
        job_title="Software Engineer",
        status=ContactStatus.ACTIVE,
        stage=ContactStage.CUSTOMER,
    )


class TestCreateContact:
    """Test contact creation."""

    @pytest.mark.asyncio
    async def test_create_contact_basic(self, contact_service, sample_contact_create, tenant_id):
        """Test creating a basic contact."""
        contact = await contact_service.create_contact(sample_contact_create, tenant_id=tenant_id)

        assert contact.first_name == "John"
        assert contact.last_name == "Doe"
        assert contact.display_name == "John Doe"
        contact_service.db.add.assert_called_once()

    @pytest.mark.asyncio
    async def test_create_contact_auto_display_name(self, contact_service, tenant_id):
        """Test auto-generated display name."""
        contact_data = ContactCreate(
            first_name="Jane",
            last_name="Smith",
        )

        contact = await contact_service.create_contact(contact_data, tenant_id)

        assert contact.display_name == "Jane Smith"

    @pytest.mark.asyncio
    async def test_create_contact_company_only(self, contact_service, tenant_id):
        """Test display name from company when no name."""
        contact_data = ContactCreate(
            company="Tech Startup Inc",
        )

        contact = await contact_service.create_contact(contact_data, tenant_id)

        assert contact.display_name == "Tech Startup Inc"

    @pytest.mark.asyncio
    async def test_create_contact_unnamed(self, contact_service, tenant_id):
        """Test fallback display name."""
        contact_data = ContactCreate()

        contact = await contact_service.create_contact(contact_data, tenant_id)

        assert contact.display_name == "Unnamed Contact"

    @pytest.mark.asyncio
    async def test_create_contact_with_custom_display_name(self, contact_service, tenant_id):
        """Test custom display name."""
        contact_data = ContactCreate(
            first_name="Robert",
            last_name="Johnson",
            display_name="Bob Johnson",
        )

        contact = await contact_service.create_contact(contact_data, tenant_id)

        assert contact.display_name == "Bob Johnson"

    @pytest.mark.asyncio
    async def test_create_contact_with_methods(self, contact_service, tenant_id):
        """Test creating contact with contact methods."""
        contact_data = ContactCreate(
            first_name="Alice",
            last_name="Wonder",
            contact_methods=[
                ContactMethodCreate(
                    type=ContactMethodType.EMAIL,
                    value="alice@example.com",
                    is_primary=True,
                ),
                ContactMethodCreate(
                    type=ContactMethodType.PHONE,
                    value="+1-555-0100",
                    label="Mobile",
                ),
            ],
        )

        contact = await contact_service.create_contact(contact_data, tenant_id)

        assert contact.first_name == "Alice"
        # Methods would be added via flush

    @pytest.mark.asyncio
    async def test_create_contact_with_tags(self, contact_service, tenant_id):
        """Test creating contact with tags."""
        contact_data = ContactCreate(
            first_name="Tagged",
            last_name="Contact",
            tags=["vip", "enterprise", "early-adopter"],
        )

        contact = await contact_service.create_contact(contact_data, tenant_id)

        assert "vip" in contact.tags
        assert "enterprise" in contact.tags

    @pytest.mark.asyncio
    async def test_create_contact_with_custom_fields(self, contact_service, tenant_id):
        """Test creating contact with custom fields."""
        contact_data = ContactCreate(
            first_name="Custom",
            last_name="Fields",
            custom_fields={
                "linkedin_url": "https://linkedin.com/in/custom",
                "github_handle": "customdev",
                "preferred_tech": "Python",
            },
        )

        contact = await contact_service.create_contact(contact_data, tenant_id)

        assert contact.custom_fields["linkedin_url"] == "https://linkedin.com/in/custom"

    @pytest.mark.asyncio
    async def test_create_contact_with_dates(self, contact_service, tenant_id):
        """Test creating contact with birthday and anniversary."""
        contact_data = ContactCreate(
            first_name="Birthday",
            last_name="Person",
            birthday=date(1990, 5, 15),
            anniversary=date(2015, 10, 20),
        )

        contact = await contact_service.create_contact(contact_data, tenant_id)

        assert contact.birthday == date(1990, 5, 15)
        assert contact.anniversary == date(2015, 10, 20)

    @pytest.mark.asyncio
    async def test_create_contact_with_roles(self, contact_service, tenant_id):
        """Test creating contact with role flags."""
        contact_data = ContactCreate(
            first_name="Decision",
            last_name="Maker",
            is_primary=True,
            is_decision_maker=True,
            is_billing_contact=False,
            is_technical_contact=True,
        )

        contact = await contact_service.create_contact(contact_data, tenant_id)

        assert contact.is_primary is True
        assert contact.is_decision_maker is True
        assert contact.is_technical_contact is True


class TestUpdateContact:
    """Test contact updates."""

    @pytest.mark.asyncio
    async def test_update_contact_fields(self, contact_service, tenant_id):
        """Test updating contact fields."""
        contact_id = uuid4()
        update_data = ContactUpdate(
            job_title="Senior Engineer",
            department="Engineering",
        )

        mock_contact = MagicMock()
        mock_contact.id = contact_id
        mock_contact.tenant_id = tenant_id

        mock_result = MagicMock()
        mock_result.scalar_one_or_none.return_value = mock_contact
        contact_service.db.execute.return_value = mock_result

        updated = await contact_service.update_contact(str(contact_id), tenant_id, update_data)

        assert updated is not None

    @pytest.mark.asyncio
    async def test_update_nonexistent_contact(self, contact_service, tenant_id):
        """Test updating non-existent contact."""
        contact_id = uuid4()
        update_data = ContactUpdate(first_name="Updated")

        mock_result = MagicMock()
        mock_result.scalar_one_or_none.return_value = None
        contact_service.db.execute.return_value = mock_result

        result = await contact_service.update_contact(str(contact_id), tenant_id, update_data)

        assert result is None


class TestGetContact:
    """Test contact retrieval."""

    @pytest.mark.asyncio
    async def test_get_existing_contact(self, contact_service, tenant_id):
        """Test getting an existing contact."""
        contact_id = uuid4()

        mock_contact = MagicMock()
        mock_contact.id = contact_id

        mock_result = MagicMock()
        mock_result.scalar_one_or_none.return_value = mock_contact
        contact_service.db.execute.return_value = mock_result

        contact = await contact_service.get_contact(str(contact_id), tenant_id)

        assert contact is not None
        assert contact.id == contact_id

    @pytest.mark.asyncio
    async def test_get_nonexistent_contact(self, contact_service, tenant_id):
        """Test getting non-existent contact."""
        contact_id = uuid4()

        mock_result = MagicMock()
        mock_result.scalar_one_or_none.return_value = None
        contact_service.db.execute.return_value = mock_result

        contact = await contact_service.get_contact(str(contact_id), tenant_id)

        assert contact is None


class TestListContacts:
    """Test listing contacts."""

    @pytest.mark.asyncio
    async def test_list_all_contacts(self, contact_service, tenant_id):
        """Test listing all contacts."""
        mock_contacts = [MagicMock(), MagicMock()]

        mock_result = MagicMock()
        mock_result.scalars.return_value.all.return_value = mock_contacts
        contact_service.db.execute.return_value = mock_result

        contacts = await contact_service.list_contacts(tenant_id)

        assert len(contacts) == 2

    @pytest.mark.asyncio
    async def test_list_contacts_with_status_filter(self, contact_service, tenant_id):
        """Test listing contacts filtered by status."""
        mock_result = MagicMock()
        mock_result.scalars.return_value.all.return_value = []
        contact_service.db.execute.return_value = mock_result

        contacts = await contact_service.list_contacts(tenant_id, status=ContactStatus.ACTIVE)

        assert isinstance(contacts, list)

    @pytest.mark.asyncio
    async def test_list_contacts_pagination(self, contact_service, tenant_id):
        """Test listing contacts with pagination."""
        mock_result = MagicMock()
        mock_result.scalars.return_value.all.return_value = []
        contact_service.db.execute.return_value = mock_result

        contacts = await contact_service.list_contacts(tenant_id, limit=10, offset=20)

        assert isinstance(contacts, list)


class TestDeleteContact:
    """Test contact deletion."""

    @pytest.mark.asyncio
    async def test_delete_existing_contact(self, contact_service, tenant_id):
        """Test deleting an existing contact."""
        contact_id = uuid4()

        mock_contact = MagicMock()
        mock_contact.id = contact_id

        mock_result = MagicMock()
        mock_result.scalar_one_or_none.return_value = mock_contact
        contact_service.db.execute.return_value = mock_result

        result = await contact_service.delete_contact(str(contact_id), tenant_id)

        assert result is True
        contact_service.db.delete.assert_called_once_with(mock_contact)

    @pytest.mark.asyncio
    async def test_delete_nonexistent_contact(self, contact_service, tenant_id):
        """Test deleting non-existent contact."""
        contact_id = uuid4()

        mock_result = MagicMock()
        mock_result.scalar_one_or_none.return_value = None
        contact_service.db.execute.return_value = mock_result

        result = await contact_service.delete_contact(str(contact_id), tenant_id)

        assert result is False


class TestSearchContacts:
    """Test contact search."""

    @pytest.mark.asyncio
    async def test_search_by_name(self, contact_service, tenant_id):
        """Test searching contacts by name."""
        mock_result = MagicMock()
        mock_result.scalars.return_value.all.return_value = []
        contact_service.db.execute.return_value = mock_result

        results = await contact_service.search_contacts(tenant_id, query="John")

        assert isinstance(results, list)

    @pytest.mark.asyncio
    async def test_search_by_company(self, contact_service, tenant_id):
        """Test searching contacts by company."""
        mock_result = MagicMock()
        mock_result.scalars.return_value.all.return_value = []
        contact_service.db.execute.return_value = mock_result

        results = await contact_service.search_contacts(tenant_id, query="Acme")

        assert isinstance(results, list)


class TestContactMethods:
    """Test contact method operations."""

    @pytest.mark.asyncio
    async def test_add_contact_method(self, contact_service, tenant_id):
        """Test adding a contact method."""
        contact_id = uuid4()
        method_data = ContactMethodCreate(
            type=ContactMethodType.EMAIL,
            value="new@example.com",
        )

        method = await contact_service.add_contact_method(str(contact_id), method_data, tenant_id)

        assert method.type == ContactMethodType.EMAIL
        assert method.value == "new@example.com"

    @pytest.mark.asyncio
    async def test_update_contact_method(self, contact_service):
        """Test updating a contact method."""
        method_id = uuid4()

        mock_method = MagicMock()
        mock_method.id = method_id

        mock_result = MagicMock()
        mock_result.scalar_one_or_none.return_value = mock_method
        contact_service.db.execute.return_value = mock_result

        updated = await contact_service.update_contact_method(str(method_id), {"label": "Work"})

        assert updated is not None

    @pytest.mark.asyncio
    async def test_delete_contact_method(self, contact_service):
        """Test deleting a contact method."""
        method_id = uuid4()

        mock_method = MagicMock()
        mock_result = MagicMock()
        mock_result.scalar_one_or_none.return_value = mock_method
        contact_service.db.execute.return_value = mock_result

        result = await contact_service.delete_contact_method(str(method_id))

        assert result is True


class TestContactActivities:
    """Test contact activity tracking."""

    @pytest.mark.asyncio
    async def test_log_activity(self, contact_service, tenant_id):
        """Test logging contact activity."""
        contact_id = uuid4()

        activity = await contact_service.log_activity(
            contact_id=str(contact_id),
            tenant_id=tenant_id,
            activity_type="email_sent",
            description="Sent welcome email",
        )

        assert activity.activity_type == "email_sent"
        contact_service.db.add.assert_called()

    @pytest.mark.asyncio
    async def test_get_contact_activities(self, contact_service, tenant_id):
        """Test getting contact activities."""
        contact_id = uuid4()

        mock_result = MagicMock()
        mock_result.scalars.return_value.all.return_value = []
        contact_service.db.execute.return_value = mock_result

        activities = await contact_service.get_contact_activities(str(contact_id), tenant_id)

        assert isinstance(activities, list)
