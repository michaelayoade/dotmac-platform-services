"""
Contact service tests - extracted from comprehensive test file.
"""

from datetime import datetime, timezone
from decimal import Decimal
from typing import Any, Dict, List
from unittest.mock import AsyncMock, Mock, MagicMock, patch
from uuid import UUID, uuid4

import pytest
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from dotmac.platform.contacts.models import (
    Contact,
    ContactMethod,
    ContactMethodType,
    ContactLabelDefinition,
    ContactFieldDefinition,
    ContactActivity,
    ContactStatus,
    ContactStage,
    ContactFieldType,
)
from dotmac.platform.contacts.schemas import (
    ContactCreate,
    ContactUpdate,
    ContactMethodCreate,
    ContactMethodUpdate,
    ContactLabelDefinitionCreate,
    ContactFieldDefinitionCreate,
    ContactActivityCreate,
)
from dotmac.platform.contacts.service import (
    ContactService,
    ContactLabelService,
    ContactFieldService,
)

pytestmark = pytest.mark.asyncio


class TestContactCaching:
    """Test contact caching behavior."""

    @pytest.mark.asyncio
    async def test_cache_set_on_get(self, mock_db_session, tenant_id, sample_contact):
        """Test that cache is set when getting contact."""
        service = ContactService(mock_db_session)

        mock_result = Mock()
        mock_result.scalar_one_or_none.return_value = sample_contact
        mock_db_session.execute = AsyncMock(return_value=mock_result)

        with patch("dotmac.platform.contacts.service.cache_get", return_value=None):
            with patch("dotmac.platform.contacts.service.cache_set") as mock_cache_set:
                contact = await service.get_contact(
                    contact_id=sample_contact.id,
                    tenant_id=tenant_id,
                    include_methods=False,
                    include_labels=False,
                )

                mock_cache_set.assert_called_once()

    @pytest.mark.asyncio
    async def test_cache_cleared_on_update(self, mock_db_session, tenant_id, sample_contact):
        """Test that cache is cleared when updating contact."""
        service = ContactService(mock_db_session)

        update_data = ContactUpdate(first_name="Jane")

        mock_result = Mock()
        mock_result.scalar_one_or_none.return_value = sample_contact
        mock_db_session.execute = AsyncMock(return_value=mock_result)

        mock_db_session.commit = AsyncMock()
        mock_db_session.refresh = AsyncMock()

        with patch("dotmac.platform.contacts.service.cache_get", return_value=None):
            with patch("dotmac.platform.contacts.service.cache_delete") as mock_cache_delete:
                contact = await service.update_contact(
                    contact_id=sample_contact.id, contact_data=update_data, tenant_id=tenant_id
                )

                mock_cache_delete.assert_called_once()

    @pytest.mark.asyncio
    async def test_cache_cleared_on_delete(self, mock_db_session, tenant_id, sample_contact):
        """Test that cache is cleared when deleting contact."""
        service = ContactService(mock_db_session)

        mock_result = Mock()
        mock_result.scalar_one_or_none.return_value = sample_contact
        mock_db_session.execute = AsyncMock(return_value=mock_result)

        mock_db_session.commit = AsyncMock()

        with patch("dotmac.platform.contacts.service.cache_get", return_value=None):
            with patch("dotmac.platform.contacts.service.cache_delete") as mock_cache_delete:
                result = await service.delete_contact(
                    contact_id=sample_contact.id, tenant_id=tenant_id
                )

                mock_cache_delete.assert_called_once()
