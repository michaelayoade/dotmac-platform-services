"""
Contact service tests - extracted from comprehensive test file.
"""

from datetime import datetime, timezone
from decimal import Decimal
from typing import Any, Dict, List
from unittest.mock import AsyncMock, Mock, MagicMock, patch
from uuid import UUID, uuid4

import pytest
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from dotmac.platform.contacts.models import (
    Contact,
    ContactMethod,
    ContactMethodType,
    ContactLabelDefinition,
    ContactFieldDefinition,
    ContactActivity,
    ContactStatus,
    ContactStage,
    ContactFieldType,
)
from dotmac.platform.contacts.schemas import (
    ContactCreate,
    ContactUpdate,
    ContactMethodCreate,
    ContactMethodUpdate,
    ContactLabelDefinitionCreate,
    ContactFieldDefinitionCreate,
    ContactActivityCreate,
)
from dotmac.platform.contacts.service import (
    ContactService,
    ContactLabelService,
    ContactFieldService,
)

pytestmark = pytest.mark.asyncio


class TestContactLabelService:
    """Test contact label service."""

    @pytest.mark.asyncio
    async def test_create_label_definition_success(self, mock_db_session, tenant_id, user_id):
        """Test creating a label definition."""
        service = ContactLabelService(mock_db_session)

        label_data = ContactLabelDefinitionCreate(
            name="Premium Customer",
            description="High-value premium customer",
            color="#FFD700",
            category="tier",
        )

        mock_db_session.commit = AsyncMock()
        mock_db_session.refresh = AsyncMock()

        label = await service.create_label_definition(
            label_data=label_data, tenant_id=tenant_id, created_by=user_id
        )

        mock_db_session.add.assert_called_once()
        mock_db_session.commit.assert_called_once()

    @pytest.mark.asyncio
    async def test_create_label_definition_auto_slug(self, mock_db_session, tenant_id, user_id):
        """Test label definition creation with auto-generated slug."""
        service = ContactLabelService(mock_db_session)

        label_data = ContactLabelDefinitionCreate(
            name="VIP Customer",
            # No slug provided
        )

        mock_db_session.commit = AsyncMock()
        mock_db_session.refresh = AsyncMock()

        label = await service.create_label_definition(
            label_data=label_data, tenant_id=tenant_id, created_by=user_id
        )

        mock_db_session.add.assert_called_once()
        added_label = mock_db_session.add.call_args[0][0]
        assert added_label.slug == "vip-customer"

    @pytest.mark.asyncio
    async def test_get_label_definitions(self, mock_db_session, tenant_id, sample_label_definition):
        """Test getting label definitions."""
        service = ContactLabelService(mock_db_session)

        mock_result = Mock()
        mock_result.scalars.return_value.all.return_value = [sample_label_definition]
        mock_db_session.execute = AsyncMock(return_value=mock_result)

        labels = await service.get_label_definitions(tenant_id=tenant_id)

        assert len(labels) == 1
        assert labels[0] == sample_label_definition

    @pytest.mark.asyncio
    async def test_get_label_definitions_with_category_filter(
        self, mock_db_session, tenant_id, sample_label_definition
    ):
        """Test getting label definitions with category filter."""
        service = ContactLabelService(mock_db_session)

        mock_result = Mock()
        mock_result.scalars.return_value.all.return_value = [sample_label_definition]
        mock_db_session.execute = AsyncMock(return_value=mock_result)

        labels = await service.get_label_definitions(tenant_id=tenant_id, category="tier")

        assert len(labels) == 1

    @pytest.mark.asyncio
    async def test_get_label_definitions_exclude_hidden(
        self, mock_db_session, tenant_id, sample_label_definition
    ):
        """Test getting label definitions excluding hidden."""
        service = ContactLabelService(mock_db_session)

        mock_result = Mock()
        mock_result.scalars.return_value.all.return_value = [sample_label_definition]
        mock_db_session.execute = AsyncMock(return_value=mock_result)

        labels = await service.get_label_definitions(tenant_id=tenant_id, include_hidden=False)

        assert len(labels) == 1


# ============================================================================
# ContactFieldService Tests
# ============================================================================
