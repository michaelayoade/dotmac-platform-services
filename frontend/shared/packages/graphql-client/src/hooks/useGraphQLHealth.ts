/**
 * Hook for GraphQL health monitoring
 */

import { useQuery } from '@apollo/client';
import { useGraphQLClient } from '../provider';
import { useState, useEffect } from 'react';

// This would be generated by codegen
const HEALTH_QUERY = `
  query HealthQuery {
    health {
      status
      version
      timestamp
      services
    }
  }
`;

export interface GraphQLHealthStatus {
  status: 'ok' | 'error' | 'loading';
  version?: string;
  timestamp?: string;
  services?: string[];
  lastCheck?: Date;
  error?: Error;
}

export interface UseGraphQLHealthOptions {
  pollInterval?: number;
  enabled?: boolean;
  onStatusChange?: (status: GraphQLHealthStatus) => void;
}

export function useGraphQLHealth({
  pollInterval = 30000, // 30 seconds
  enabled = true,
  onStatusChange,
}: UseGraphQLHealthOptions = {}): GraphQLHealthStatus {
  const { client } = useGraphQLClient();
  const [healthStatus, setHealthStatus] = useState<GraphQLHealthStatus>({
    status: 'loading',
  });

  const { data, loading, error, startPolling, stopPolling } = useQuery(
    require('../queries/health.graphql').HEALTH_QUERY,
    {
      skip: !enabled,
      errorPolicy: 'all',
      fetchPolicy: 'cache-and-network',
    }
  );

  useEffect(() => {
    if (!enabled) {
      stopPolling();
      return;
    }

    startPolling(pollInterval);
    return () => stopPolling();
  }, [enabled, pollInterval, startPolling, stopPolling]);

  useEffect(() => {
    let newStatus: GraphQLHealthStatus;

    if (loading && !data) {
      newStatus = { status: 'loading' };
    } else if (error) {
      newStatus = {
        status: 'error',
        error: error as Error,
        lastCheck: new Date(),
      };
    } else if (data?.health) {
      newStatus = {
        status: data.health.status === 'ok' ? 'ok' : 'error',
        version: data.health.version,
        timestamp: data.health.timestamp,
        services: data.health.services,
        lastCheck: new Date(),
      };
    } else {
      newStatus = {
        status: 'error',
        error: new Error('No health data received'),
        lastCheck: new Date(),
      };
    }

    if (newStatus.status !== healthStatus.status) {
      setHealthStatus(newStatus);
      onStatusChange?.(newStatus);
    } else {
      setHealthStatus(prev => ({ ...prev, lastCheck: newStatus.lastCheck }));
    }
  }, [data, loading, error, healthStatus.status, onStatusChange]);

  return healthStatus;
}

// Utility hook for simple health check
export function useGraphQLHealthCheck(): {
  isHealthy: boolean;
  isLoading: boolean;
  lastCheck?: Date;
  checkHealth: () => Promise<boolean>;
} {
  const { client } = useGraphQLClient();
  const healthStatus = useGraphQLHealth({ enabled: false });
  const [isLoading, setIsLoading] = useState(false);

  const checkHealth = async (): Promise<boolean> => {
    setIsLoading(true);
    try {
      const result = await client.healthCheck();
      return result;
    } catch (error) {
      console.error('Health check failed:', error);
      return false;
    } finally {
      setIsLoading(false);
    }
  };

  return {
    isHealthy: healthStatus.status === 'ok',
    isLoading: isLoading || healthStatus.status === 'loading',
    lastCheck: healthStatus.lastCheck,
    checkHealth,
  };
}