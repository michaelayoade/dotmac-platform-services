[build-system]
requires = ["poetry-core"]

build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "dotmac-platform-services"
version = "1.0.0"
description = "DotMac Platform Services - Unified auth, secrets, and observability"
authors = ["DotMac Team <dev@dotmac.com>"]

readme = "README.md"
packages = [{include = "dotmac", from = "src"}]

[tool.poetry.dependencies]
python = ">=3.12,<3.14"
# Core dependencies
fastapi = ">=0.110.0"
pydantic = ">=2.5.0"
pydantic-settings = ">=2.0.0"
sqlalchemy = ">=2.0.0"
pyjwt = {extras = ["crypto"], version = ">=2.8.0"}
redis = ">=5.0.0"
cryptography = ">=41.0.0"
httpx = ">=0.25.0"
aiohttp = ">=3.9.0"
structlog = ">=23.0.0"
protobuf = "^4.25.8"
pyyaml = ">=6.0.0"
# Standard library replacements for core
slowapi = ">=0.1.9"
tenacity = ">=8.2.0"
result = ">=0.16.0"
email-validator = ">=2.1.0"
phonenumbers = ">=8.13.0"
python-dotenv = ">=1.0.0"
fastapi-pagination = ">=0.12.0"
cachetools = ">=5.3.0"
# OAuth with Authlib
authlib = ">=1.3.0"

# OpenTelemetry (observability) - Core packages for telemetry
opentelemetry-api = ">=1.21.0"
opentelemetry-sdk = ">=1.21.0"
opentelemetry-exporter-otlp = ">=1.21.0"
opentelemetry-instrumentation-fastapi = ">=0.42b0"
opentelemetry-instrumentation-sqlalchemy = ">=0.42b0"

# Additional OpenTelemetry instrumentations
opentelemetry-instrumentation-requests = ">=0.42b0"
opentelemetry-instrumentation-celery = ">=0.48b0"

# Task Queue & Messaging
celery = {extras = ["redis", "amqp"], version = "^5.3.0"}
kombu = "^5.3.0"
flower = "^2.0.1"

# Database Migrations
alembic = "^1.13.0"

# Rules Engine (replaces custom workflow engines)
python-rule-engine = "^1.0.0"

# Service discovery (modern fork with Python 3.13 support)
py-consul = {extras = ["asyncio"], version = "^1.6.0"}

# Storage
minio = "^7.2.0"
python-multipart = "^0.0.18"

# Search
meilisearch = "^0.31.0"

# Server
uvicorn = {extras = ["standard"], version = ">=0.25.0"}

# Secrets and authentication (all core now)
hvac = "^2.0.0"
pyotp = ">=2.9.0"
qrcode = {extras = ["pil"], version = ">=7.4.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
bcrypt = "^4.3.0"  # Pin bcrypt version to avoid warnings

# Database drivers (all core)
aiosqlite = ">=0.19.0"
psycopg2-binary = "^2.9.10"
asyncpg = "^0.30.0"

# Development tools
gitpython = "^3.1.40"
# File Processing & I/O
aiofiles = "^24.1.0"
pypdf2 = "^3.0.1"
pillow = "^10.2.0"  # Image processing
python-docx = "^1.1.0"  # Word document processing
openpyxl = "^3.1.2"  # Excel processing
python-pptx = "^0.6.23"  # PowerPoint processing
ffmpeg-python = "^0.2.0"  # Video processing
pandas = "^2.2.0"  # Data processing and analysis
# pyyaml already included above in core dependencies
# xml.etree is part of Python stdlib, no need to install
jinja2 = "^3.1.6"
greenlet = "^3.2.4"
lxml = "^6.0.2"
casbin = "^1.43.0"
casbin-sqlalchemy-adapter = "^1.4.0"
psutil = "^5.9.0"
prometheus-client = "^0.23.1"

# No extras needed - all dependencies are core
# [tool.poetry.extras] section removed
py-moneyed = "^3.0"
babel = "^2.17.0"
reportlab = "^4.4.4"
strawberry-graphql = "^0.282.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.3"
pytest-asyncio = "^0.21.1"
pytest-cov = "^4.1.0"
black = "^24.3.0"
ruff = ">=0.1.0"
mypy = ">=1.7.0"
bandit = {extras = ["toml"], version = ">=1.7.0"}
fakeredis = "^2.20.0"
pytest-mock = "^3.12.0"
factory-boy = "^3.3.0"
freezegun = "^1.4.0"
responses = "^0.24.0"
tenacity = "^8.2.3"
mutmut = "^2.4.5"
pip-audit = "^2.7.3"
# Contract testing
schemathesis = "^3.19.0"
openapi-spec-validator = "^0.6.0"
jsonschema = "^4.20.0"
# Test dependencies that need extras
hvac = "^2.0.0"  # For Vault integration tests
uvicorn = {extras = ["standard"], version = ">=0.25.0"}  # For testing server
pyotp = ">=2.9.0"  # For MFA tests
qrcode = {extras = ["pil"], version = ">=7.4.0"}  # For MFA tests
aiosqlite = ">=0.19.0"  # For SQLite tests
psycopg2-binary = "^2.9.10"  # For PostgreSQL tests
asyncpg = "^0.30.0"  # For PostgreSQL tests
passlib = {extras = ["bcrypt"], version = "^1.7.4"}  # For password hashing tests
isort = "^6.0.1"
pytest-xdist = "^3.8.0"



[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "slow: Slow running tests",
    "auth: Authentication related tests",
    "observability: Observability related tests",
    "secrets: Secrets management tests",
    "benchmark: Performance benchmark tests",
    "performance: Performance tests",
    "chaos: Chaos engineering tests",
    "contract: API contract tests"
]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src/dotmac",
    "--cov-branch",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--cov-report=html",
    "--cov-fail-under=90"
]

[tool.coverage.run]
source = ["src/dotmac"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/examples/*",
    "*/scripts/*"
]
parallel = true

[tool.coverage.report]
fail_under = 90
precision = 2
skip_covered = false
show_missing = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "if typing.TYPE_CHECKING:",
    "@abstractmethod",
    "@abc.abstractmethod",
    "except ImportError:",
    "# nocov",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.mutmut]
# Limit mutation testing to auth and secrets code paths
paths_to_mutate = "src/dotmac/platform/auth src/dotmac/platform/secrets"
tests_dir = "tests/"
runner = "python -m pytest -x --tb=short"
dict_synonyms = "Struct,NamedStruct"

[tool.ruff]
target-version = "py312"
line-length = 100
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "venv",
    "build",
    "dist",
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "W293",  # blank line with whitespace
    "W291",  # trailing whitespace
    "B008",  # function calls in argument defaults (ok for FastAPI Depends)
    "B904",  # raise without from (can add later)
]

[tool.black]
line-length = 100
target-version = ["py312"]
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 100

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
no_implicit_optional = true
check_untyped_defs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true

[tool.bandit]
tests = ["B201", "B301"]
skips = ["B101", "B601"]
