"""link_invoices_to_contacts

Revision ID: f1c6e454da91
Revises: b9f25627decc
Create Date: 2025-09-30 10:44:43.358174

"""

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = "f1c6e454da91"
down_revision = "b9f25627decc"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "data_import_jobs",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column(
            "job_type",
            sa.Enum(
                "CUSTOMERS",
                "INVOICES",
                "SUBSCRIPTIONS",
                "PAYMENTS",
                "PRODUCTS",
                "MIXED",
                name="importjobtype",
            ),
            nullable=False,
        ),
        sa.Column(
            "status",
            sa.Enum(
                "PENDING",
                "VALIDATING",
                "IN_PROGRESS",
                "COMPLETED",
                "FAILED",
                "PARTIALLY_COMPLETED",
                "CANCELLED",
                name="importjobstatus",
            ),
            nullable=False,
        ),
        sa.Column("file_name", sa.String(length=255), nullable=False),
        sa.Column("file_size", sa.Integer(), nullable=False),
        sa.Column("file_format", sa.String(length=20), nullable=False),
        sa.Column("total_records", sa.Integer(), nullable=False),
        sa.Column("processed_records", sa.Integer(), nullable=False),
        sa.Column("successful_records", sa.Integer(), nullable=False),
        sa.Column("failed_records", sa.Integer(), nullable=False),
        sa.Column("started_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("completed_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("initiated_by", sa.UUID(), nullable=True),
        sa.Column("config", sa.JSON(), nullable=False, comment="Import configuration options"),
        sa.Column("summary", sa.JSON(), nullable=False, comment="Import summary and statistics"),
        sa.Column("error_message", sa.Text(), nullable=True),
        sa.Column("celery_task_id", sa.String(length=255), nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("tenant_id", sa.String(length=255), nullable=True),
        sa.ForeignKeyConstraint(["initiated_by"], ["users.id"], ondelete="SET NULL"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_data_import_jobs_job_type"), "data_import_jobs", ["job_type"], unique=False
    )
    op.create_index(
        op.f("ix_data_import_jobs_status"), "data_import_jobs", ["status"], unique=False
    )
    op.create_index(
        op.f("ix_data_import_jobs_tenant_id"), "data_import_jobs", ["tenant_id"], unique=False
    )
    op.create_index("ix_import_jobs_created", "data_import_jobs", ["created_at"], unique=False)
    op.create_index(
        "ix_import_jobs_tenant_status", "data_import_jobs", ["tenant_id", "status"], unique=False
    )
    op.create_index(
        "ix_import_jobs_tenant_type", "data_import_jobs", ["tenant_id", "job_type"], unique=False
    )
    op.create_table(
        "data_import_failures",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("job_id", sa.UUID(), nullable=False),
        sa.Column("row_number", sa.Integer(), nullable=False),
        sa.Column("error_type", sa.String(length=50), nullable=False),
        sa.Column("error_message", sa.Text(), nullable=False),
        sa.Column(
            "row_data", sa.JSON(), nullable=False, comment="Original row data that failed to import"
        ),
        sa.Column(
            "field_errors", sa.JSON(), nullable=False, comment="Field-specific error messages"
        ),
        sa.Column("retry_count", sa.Integer(), nullable=False),
        sa.Column("can_retry", sa.Boolean(), nullable=False),
        sa.Column("resolved", sa.Boolean(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("tenant_id", sa.String(length=255), nullable=True),
        sa.ForeignKeyConstraint(["job_id"], ["data_import_jobs.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_data_import_failures_job_id"), "data_import_failures", ["job_id"], unique=False
    )
    op.create_index(
        op.f("ix_data_import_failures_tenant_id"),
        "data_import_failures",
        ["tenant_id"],
        unique=False,
    )
    op.create_index(
        "ix_import_failures_error_type", "data_import_failures", ["error_type"], unique=False
    )
    op.create_index(
        "ix_import_failures_job_resolved",
        "data_import_failures",
        ["job_id", "resolved"],
        unique=False,
    )
    op.add_column(
        "cash_registers", sa.Column("created_at", sa.DateTime(timezone=True), nullable=False)
    )
    op.add_column(
        "cash_registers", sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False)
    )
    op.alter_column(
        "cash_registers",
        "current_float",
        existing_type=sa.NUMERIC(precision=19, scale=4),
        type_=sa.Numeric(precision=10, scale=2),
        existing_nullable=False,
    )
    op.alter_column(
        "cash_registers",
        "max_cash_limit",
        existing_type=sa.NUMERIC(precision=19, scale=4),
        type_=sa.Numeric(precision=10, scale=2),
        existing_nullable=True,
    )
    op.create_index("idx_cash_register_active", "cash_registers", ["is_active"], unique=False)
    op.create_index("idx_cash_register_tenant", "cash_registers", ["tenant_id"], unique=False)
    # Try to create constraint, ignore if exists
    try:
        op.create_unique_constraint(
            "uq_contact_label", "contact_to_labels", ["contact_id", "label_definition_id"]
        )
    except Exception:
        pass  # Constraint already exists
    op.create_foreign_key(
        None, "contacts", "customers", ["customer_id"], ["id"], ondelete="CASCADE"
    )
    op.add_column("invoices", sa.Column("billing_contact_id", sa.String(length=255), nullable=True))
    op.create_index(
        op.f("ix_invoices_billing_contact_id"), "invoices", ["billing_contact_id"], unique=False
    )
    op.create_foreign_key(
        None, "invoices", "contacts", ["billing_contact_id"], ["id"], ondelete="SET NULL"
    )
    op.create_unique_constraint(
        "uq_role_permission", "role_permissions", ["role_id", "permission_id"]
    )
    op.create_unique_constraint(
        "uq_user_permission", "user_permissions", ["user_id", "permission_id"]
    )
    op.create_unique_constraint("uq_user_role", "user_roles", ["user_id", "role_id"])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint("uq_user_role", "user_roles", type_="unique")
    op.drop_constraint("uq_user_permission", "user_permissions", type_="unique")
    op.drop_constraint("uq_role_permission", "role_permissions", type_="unique")
    op.drop_constraint(None, "invoices", type_="foreignkey")
    op.drop_index(op.f("ix_invoices_billing_contact_id"), table_name="invoices")
    op.drop_column("invoices", "billing_contact_id")
    op.drop_constraint(None, "contacts", type_="foreignkey")
    op.drop_constraint("uq_contact_label", "contact_to_labels", type_="unique")
    op.drop_index("idx_cash_register_tenant", table_name="cash_registers")
    op.drop_index("idx_cash_register_active", table_name="cash_registers")
    op.alter_column(
        "cash_registers",
        "max_cash_limit",
        existing_type=sa.Numeric(precision=10, scale=2),
        type_=sa.NUMERIC(precision=19, scale=4),
        existing_nullable=True,
    )
    op.alter_column(
        "cash_registers",
        "current_float",
        existing_type=sa.Numeric(precision=10, scale=2),
        type_=sa.NUMERIC(precision=19, scale=4),
        existing_nullable=False,
    )
    op.drop_column("cash_registers", "updated_at")
    op.drop_column("cash_registers", "created_at")
    op.drop_index("ix_import_failures_job_resolved", table_name="data_import_failures")
    op.drop_index("ix_import_failures_error_type", table_name="data_import_failures")
    op.drop_index(op.f("ix_data_import_failures_tenant_id"), table_name="data_import_failures")
    op.drop_index(op.f("ix_data_import_failures_job_id"), table_name="data_import_failures")
    op.drop_table("data_import_failures")
    op.drop_index("ix_import_jobs_tenant_type", table_name="data_import_jobs")
    op.drop_index("ix_import_jobs_tenant_status", table_name="data_import_jobs")
    op.drop_index("ix_import_jobs_created", table_name="data_import_jobs")
    op.drop_index(op.f("ix_data_import_jobs_tenant_id"), table_name="data_import_jobs")
    op.drop_index(op.f("ix_data_import_jobs_status"), table_name="data_import_jobs")
    op.drop_index(op.f("ix_data_import_jobs_job_type"), table_name="data_import_jobs")
    op.drop_table("data_import_jobs")
    # ### end Alembic commands ###
